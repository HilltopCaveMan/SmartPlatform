// Generated by IBatisNetModel

using System;
using System.Collections;

using GModel.Basic;
using GInterfaceDAL.Basic;
using GDAL.Basic;
using System.Collections.Generic;

namespace GBLL.Basic
{
    public class UserFieldsBLL
    {
        private ColligateQueryService query = new ColligateQueryService();

        private IUserFieldsDao _iUserFieldsDao = null;
        public UserFieldsBLL()
        {
            _iUserFieldsDao = new UserFieldsDao();
        }

		public UserFields GetUserFields(object o)
        {
            return _iUserFieldsDao.GetUserFields( o);
        }

        /// <summary>
        /// 依据部门ID加载自定义字段对象集合
        /// </summary>
        /// <param name="DeptId"></param>
        /// <returns></returns>
        public IList<UserFields> GetUserFieldsList(string DeptId)
        {
            List<UserFields> uf_list = new List<UserFields>();

            string cache_name = "CurUserFieldsList_" + DeptId;

            if (CacheHelper.Get(cache_name) != null)
            {
                uf_list = (List<UserFields>)CacheHelper.Get(cache_name);
            }
            else
            {
                uf_list = (List<UserFields>)this.UpdateCache(DeptId);
            }

            return uf_list;
        }

        private IList<UserFields> UpdateCache(string DeptId)
        {
            List<UserFields> uf_list = new List<UserFields>();

            string sql = @" select f.uf_id, f.dept_id, f.uf_name, f.uf_desc, f.field_type, f.info_type
                              from dept_info d, user_fields f
                             where f.dept_id = d.businessdivisionid
                               and f.dept_id = '" + DeptId + @"'
                             order by f.uf_name
                            ";

            System.Data.DataSet ds = query.GetColligateQuery("ColligateQuery.ProteanQuery", sql);

            if (ds != null
                && ds.Tables.Count > 0
                && ds.Tables[0].Rows.Count > 0)
            {
                foreach (System.Data.DataRow dr in ds.Tables[0].Rows)
                {
                    UserFields tmp = new UserFields();

                    tmp.DeptId = dr["dept_id"].ToString();
                    tmp.InfoType = dr["info_type"].ToString();
                    tmp.UfDesc = dr["uf_desc"].ToString();
                    tmp.UfId = dr["uf_id"].ToString();
                    tmp.UfName = dr["uf_name"].ToString();

                    tmp.FieldType = dr["field_type"].ToString();

                    uf_list.Add(tmp);
                }
            }

            string cache_name = "CurUserFieldsList_" + DeptId;

            CacheHelper.Remove(cache_name);
            CacheHelper.Insert(cache_name, uf_list, 365 * 24 * 60);

            return uf_list;
        }

        public IList<UserFields> GetUserFieldsPage(object o)
        {
            return _iUserFieldsDao.GetUserFieldsPage(o);
        }

		public int GetUserFieldsCount(object o)
        {
            return _iUserFieldsDao.GetUserFieldsCount(o);
        }

        //public IList<UserFields> GetUserFieldsList(object o)
        //{
            //return _iUserFieldsDao.GetUserFieldsList(o);
        //}

		public int Insert(UserFields entity)
        {
            int n = Convert.ToInt32(_iUserFieldsDao.Insert(entity));

            this.UpdateCache(entity.DeptId);

            return n;
        }

        public int Update(UserFields entity)
        {
            int n = _iUserFieldsDao.Update(entity);

            this.UpdateCache(entity.DeptId);

            return n;
        }
		
        public int Delete(string condition)
        {
            int n = _iUserFieldsDao.Delete(condition);

            UserInfo user = new UserInfo();
            user = (UserInfo)System.Web.HttpContext.Current.Session["LoginUser"];

            this.UpdateCache(user.EnterId);

            return n;
        }
    }
}
	