// Generated by IBatisNetModel

using System;
using System.Data;
using System.Collections;
using System.Collections.Generic;

using GModel.Car;

using GInterfaceDAL.Car;
using GDAL.Car;
using GModel.Basic;
using GModel;
using GDAL;

namespace GBLL.Car
{
    public class CarReportBLL
    {
        private ColligateQueryService query = new ColligateQueryService();

        private ICarReportDao _iCarReportDao = null;

        public CarReportBLL()
        {
            _iCarReportDao = new CarReportDao();
        }

        public List<TreeMode> GetReportMenuTree()
        {
            return _iCarReportDao.GetReportMenuTree();
        }

        #region 超里程车辆统计

        public string GetVis_Carlist_clc(string CurUserDeptCode)
        {
            bool flg = _iCarReportDao.GetVis_Carlist(CurUserDeptCode);
            
            string val = "false";
            if (flg)
            {
                val = "true";
            }

            return val;
        }

        public IList<CarReport_LCTJView> GetVis_Carlist_ViewPage(string CurUserDeptCode)
        {
            IList<CarReport_LCTJView> list = new List<CarReport_LCTJView>();

            DataTable dt = _iCarReportDao.GetVis_Carlist_dt2(CurUserDeptCode);

            if (dt != null && dt.Rows.Count > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {
                    CarReport_LCTJView node = new CarReport_LCTJView();

                    node.TerNo = dr["ter_no"].ToString();
                    node.CarNo = dr["car_no"].ToString();

                    node.Rtime = dr["rtime"].ToString();
                    node.Position = dr["position"].ToString();

                    double lc = 0;
                    if (dr["REMAINL_PCT"] != DBNull.Value)
                    {
                        lc = int.Parse(dr["REMAINL_PCT"].ToString(), 
                                        System.Globalization.NumberStyles.HexNumber);

                        lc = lc / 1000;
                    }

                    node.LCTJ = lc;
                    node.FXJG = "";

                    list.Add(node);
                }
            }

            return list;
        }


        #endregion

        #region 终端统计

        public List<CarReport_ZDTJView> GetCarReport_ZDTJViewPage(Hashtable ht, out int rowCount)
        {
            List<CarReport_ZDTJView> list = new List<CarReport_ZDTJView>();
            rowCount = 0;

            //*************************************************************

            //数据源
            DataTable dt = _iCarReportDao.GetCarReport_ZDTJViewPage_FY(ht);

            //求总数
            rowCount = _iCarReportDao.GetCarReport_ZDTJViewPage_Count(ht);

            //组织输出对象列表
            return GetCarRptZDTJList(dt);
        }

        public List<CarReport_ZDTJView> GetCarReport_ZDTJToExcel(Hashtable ht)
        {
            List<CarReport_ZDTJView> list = new List<CarReport_ZDTJView>();

            //DataTable dt = _iCarReportDao.GetCarReport_LCTJViewPage(ht);
            //缓存
            //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            DataTable dt = this.GetData_CarReport_ZDTJ_Cache(ht);

            if (dt == null || dt.Rows.Count == 0)
            {
                return list;
            }

            //统计终端号列表
            //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            string key = "_YXZD_";
            if (ht["TerType"] != null)
            {
                key = ht["TerType"].ToString().Trim().ToUpper();
            }
            ArrayList terNos = this.GetAllTerNoList_Cache(ht, dt, key);

            //组织输出对象列表
            return GetCarRptZDTJList(terNos, dt);
        }

        private List<CarReport_ZDTJView> GetCarRptZDTJList(ArrayList terNos, DataTable dt)
        {
            List<CarReport_ZDTJView> list = new List<CarReport_ZDTJView>();

            if (terNos.Count > 0)
            {
                foreach (DictionaryEntry e in terNos)
                {
                    DataRow[] foundRows = dt.Select(" TER_NO = '" + e.Value.ToString() + "'");

                    if (foundRows.Length > 0)
                    {
                        DataRow dr = foundRows[0];

                        CarReport_ZDTJView node = new CarReport_ZDTJView();

                        node.TerNo = dr["ter_no"].ToString();
                        node.CarNo = dr["car_no"].ToString();

                        //回传时间
                        if (dr["HCSJ"] != DBNull.Value)
                        {
                            node.HCSJ = Convert.ToDateTime(dr["HCSJ"]).ToString("G");
                        }
                        //总里程
                        if (dr["ZLC"] != DBNull.Value)
                        {
                            node.LCTJ = int.Parse(dr["ZLC"].ToString(), System.Globalization.NumberStyles.HexNumber);
                        }
                        //离线天数
                        if (dr["LXTS"] != DBNull.Value)
                        {
                            node.LJLXTS = dr["LXTS"].ToString();
                        }
                        //当前报警状态
                        if (dr["DQBJZT"] != DBNull.Value)
                        {
                            node.DQBJZT = dr["DQBJZT"].ToString();
                        }

                        //标准比例
                        if (dr["MS_BZBL"] != DBNull.Value)
                        {
                            node.MS_BZBL = dr["MS_BZBL"].ToString();
                            if (node.MS_BZBL.Trim().Length > 0)
                                node.MS_BZBL += "%";
                        }
                        //精准比例
                        if (dr["MS_JZBL"] != DBNull.Value)
                        {
                            node.MS_JZBL = dr["MS_JZBL"].ToString();
                            if (node.MS_JZBL.Trim().Length > 0)
                                node.MS_JZBL += "%";
                        }
                        //追车比例
                        if (dr["MS_ZCBL"] != DBNull.Value)
                        {
                            node.MS_ZCBL = dr["MS_ZCBL"].ToString();
                            if (node.MS_ZCBL.Trim().Length > 0)
                                node.MS_ZCBL += "%";
                        }

                        //回传次数
                        if (dr["HCCS"] != DBNull.Value)
                        {
                            node.LJHCCS = dr["HCCS"].ToString();
                        }
                        //累计工时
                        if (dr["LJGS"] != DBNull.Value)
                        {
                            node.LJGS = dr["LJGS"].ToString();
                        }
                        //统计时间
                        if (dr["TJSJ"] != DBNull.Value)
                        {
                            node.TJSJ = dr["TJSJ"].ToString();
                        }

                        node.FXJG = "";

                        list.Add(node);
                    }
                }
            }

            return list;
        }
        private List<CarReport_ZDTJView> GetCarRptZDTJList(DataTable dt)
        {
            List<CarReport_ZDTJView> list = new List<CarReport_ZDTJView>();

            if(dt!=null && dt.Rows.Count>0)
            {
                foreach(DataRow dr in dt.Rows)
                {
                    //DataRow dr = foundRows[0];

                    CarReport_ZDTJView node = new CarReport_ZDTJView();

                    node.TerNo = dr["ter_no"].ToString();
                    node.CarNo = dr["car_no"].ToString();

                    //回传时间
                    if (dr["HCSJ"] != DBNull.Value)
                    {
                        node.HCSJ = Convert.ToDateTime(dr["HCSJ"]).ToString("yyyy-MM-dd HH:mm:ss");
                    }
                    //总里程
                    if (dr["ZLC"] != DBNull.Value)
                    {
                        node.LCTJ = int.Parse(dr["ZLC"].ToString(), System.Globalization.NumberStyles.HexNumber);
                    }
                    //离线天数
                    if (dr["LXTS"] != DBNull.Value)
                    {
                        node.LJLXTS = dr["LXTS"].ToString();
                    }
                    //当前报警状态
                    if (dr["DQBJZT"] != DBNull.Value)
                    {
                        node.DQBJZT = dr["DQBJZT"].ToString();
                    }

                    //标准比例
                    if (dr["MS_BZBL"] != DBNull.Value)
                    {
                        node.MS_BZBL = dr["MS_BZBL"].ToString();
                        if (node.MS_BZBL.Trim().Length > 0)
                            node.MS_BZBL += "%";
                    }
                    //精准比例
                    if (dr["MS_JZBL"] != DBNull.Value)
                    {
                        node.MS_JZBL = dr["MS_JZBL"].ToString();
                        if (node.MS_JZBL.Trim().Length > 0)
                            node.MS_JZBL += "%";
                    }
                    //追车比例
                    if (dr["MS_ZCBL"] != DBNull.Value)
                    {
                        node.MS_ZCBL = dr["MS_ZCBL"].ToString();
                        if (node.MS_ZCBL.Trim().Length > 0)
                            node.MS_ZCBL += "%";
                    }

                    //回传次数
                    if (dr["HCCS"] != DBNull.Value)
                    {
                        node.LJHCCS = dr["HCCS"].ToString();
                    }
                    //累计工时
                    if (dr["LJGS"] != DBNull.Value)
                    {
                        node.LJGS = dr["LJGS"].ToString();
                    }
                    //统计时间
                    if (dr["TJSJ"] != DBNull.Value)
                    {
                        node.TJSJ = Convert.ToDateTime(dr["TJSJ"]).ToString("yyyy-MM-dd HH:mm:ss");
                    }

                    node.FXJG = "";

                    list.Add(node);
                }
            }

            return list;
        }

        private DataTable GetData_CarReport_ZDTJ_Cache(Hashtable ht)
        {
            DataTable dt = null;

            UserInfo user = new UserInfo();
            user = (UserInfo)System.Web.HttpContext.Current.Session["LoginUser"];

            string TerType = "YXZD";

            if (ht["TerType"] != null)
            {
                TerType = ht["TerType"].ToString().Trim().ToUpper();
            }

            string cacheArgsName = "Cur_UserArgs_" + user.UserLname + TerType + "_GetZDTJData";
            string cacheDataName = "Cur_User_" + user.UserLname + TerType + "_GetZDTJData";

            bool loadFlag = false;

            if (System.Web.HttpContext.Current.Session[cacheArgsName] != null)
            {
                Hashtable _tmpHt = (Hashtable)System.Web.HttpContext.Current.Session[cacheArgsName];

                if (HashtableEquals(ht, _tmpHt))
                {
                    //查询条件相同，取缓存
                    if (System.Web.HttpContext.Current.Session[cacheDataName] != null)
                    {
                        dt = (DataTable)System.Web.HttpContext.Current.Session[cacheDataName];
                    }
                    else
                    {
                        loadFlag = true;
                    }
                }
                else
                {
                    //重新加载
                    loadFlag = true;
                }
            }
            else
            {
                //不存在,重新加载
                loadFlag = true;
            }

            if (loadFlag)
            {
                dt = _iCarReportDao.GetCarReport_ZDTJViewPage(ht);

                System.Web.HttpContext.Current.Session[cacheArgsName] = ht;
                System.Web.HttpContext.Current.Session[cacheDataName] = dt;
            }

            return dt;
        }

        #endregion

        #region 报警统计

        private DataTable GetData_CarReport_BJTJ_Cache(Hashtable ht,string key)
        {
            ColligateQueryService c = new ColligateQueryService();
            DataTable dt = new DataTable();
            DataTable ysdl_dt = new DataTable();
            DataTable yscc_dt = new DataTable();
            UserInfo user = new UserInfo();
            user = (UserInfo)System.Web.HttpContext.Current.Session["LoginUser"];

            string cacheArgsName = "Cur_UserArgs_" + user.UserLname + "_" + key + "_GetBJTJData";
            string cacheDataName = "Cur_User_" + user.UserLname +"_"+key+ "_GetBJTJData";

            bool loadFlag = false;

            if (System.Web.HttpContext.Current.Session[cacheArgsName] != null)
            {
                Hashtable _tmpHt = (Hashtable)System.Web.HttpContext.Current.Session[cacheArgsName];

                if (HashtableEquals(ht, _tmpHt))
                {
                    //查询条件相同，取缓存
                    if (System.Web.HttpContext.Current.Session[cacheDataName] != null)
                    {
                        dt = (DataTable)System.Web.HttpContext.Current.Session[cacheDataName];
                    }
                    else
                    {
                        loadFlag = true;
                    }
                }
                else
                {
                    //重新加载
                    loadFlag = true;
                }
            }
            else
            {
                //不存在,重新加载
                loadFlag = true;
            }

            if (loadFlag)
            {
                dt = _iCarReportDao.GetCarReport_BJTJViewPage(ht);
                System.Web.HttpContext.Current.Session[cacheArgsName] = ht;
                System.Web.HttpContext.Current.Session[cacheDataName] = dt;
            }
            return dt;
        }

        public List<CarReport_BJView> GetCarReport_BJViewPage(Hashtable ht, out int rowCount)
        {
            List<CarReport_BJView> list = new List<CarReport_BJView>();
            rowCount = 0;
            DataTable dt = new DataTable();

            //数据源
            dt = _iCarReportDao.GetCarReport_BJTJViewPage_FY(ht);

            //求总数
            rowCount = _iCarReportDao.GetCarReport_BJTJViewPage_Count(ht);

            return GetCarRptBJTJList(dt);
        }

        public int GetCarReport_BJViewPageCount(Hashtable ht)
        {
            return _iCarReportDao.GetCarReport_BJTJViewPage_Count(ht);
        }

        
        /// <summary>
        /// 经纬度算距离
        /// </summary>
        /// <param name="dwLong1"></param>
        /// <param name="dwLat1"></param>
        /// <param name="dwLong2"></param>
        /// <param name="dwLat2"></param>
        /// <returns></returns>
        public double GetDistance(double dwLong1, double dwLat1, double dwLong2, double dwLat2)
        {
            double p_dMapBasePi = 3.141592653589793238;
            double dwLength = 0;
            dwLength = 6371110 * Math.Cos(Math.Sin(dwLat1 * p_dMapBasePi / 180) * Math.Sin(dwLat2 * p_dMapBasePi / 180) + Math.Cos(dwLat1 * p_dMapBasePi / 180) * Math.Cos(dwLat2 * p_dMapBasePi / 180) * Math.Cos((dwLong1 * p_dMapBasePi / 180) - (dwLong2 * p_dMapBasePi / 180)));
            return dwLength;
        }

        public List<CarReport_BJView> GetCarReport_BJViewToExcel(Hashtable ht)
        {
            List<CarReport_BJView> list = new List<CarReport_BJView>();

            string key = "_qb_";
            if (ht["WarningType"] != null)
            {
                key = ht["WarningType"].ToString();
            }

            //缓存
            //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            DataTable dt = this.GetData_CarReport_BJTJ_Cache(ht,key);

            if (dt == null || dt.Rows.Count == 0)
            {
                return list;
            }

            //统计终端号列表
            //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            ArrayList terNos = this.GetAllTerNoList_Cache(ht, dt, key);

            //组织输出对象列表
            return GetCarRptBJTJList(terNos, dt);
        }

        private List<CarReport_BJView> GetCarRptBJTJList(ArrayList terNos, DataTable dt)
        {
            List<CarReport_BJView> list = new List<CarReport_BJView>();

            if (terNos.Count > 0)
            {
                foreach (DictionaryEntry e in terNos)
                {
                    DataRow[] foundRows = dt.Select(" TER_NO = '" + e.Value.ToString() + "'");

                    if (foundRows.Length > 0)
                    {
                        DataRow dr = foundRows[0];

                        CarReport_BJView node = new CarReport_BJView();

                        node.TerNo = dr["ter_no"].ToString();
                        node.CarNo = dr["car_no"].ToString();

                        if (dr["rtime"] != DBNull.Value)
                        {
                            node.HCSJ = Convert.ToDateTime(dr["rtime"]).ToString("yyyy-MM-dd HH:mm:ss");
                        }
                        node.Position = dr["position"].ToString();
                        node.Postbacktimes = dr["postbacktimes"].ToString();
                        if (dr["rtime"] != DBNull.Value)
                        {
                            node.LJLXTS = dr["lx"].ToString();
                        }
                        node.TerStatus = dr["ter_status"].ToString();
                        node.ReplyDataName = dr["replydataname"].ToString();
                        node.FXJG = "";

                        list.Add(node);
                    }
                }
            }

            return list;
        }

        private List<CarReport_BJView> GetCarRptBJTJList(DataTable dt)
        {
            List<CarReport_BJView> list = new List<CarReport_BJView>();

            if (dt != null && dt.Rows.Count > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {
                    CarReport_BJView node = new CarReport_BJView();

                    node.TerNo = dr["ter_no"].ToString();
                    node.CarNo = dr["car_no"].ToString();

                    if (dr["rtime"] != DBNull.Value)
                    {
                        node.HCSJ = Convert.ToDateTime(dr["rtime"]).ToString("yyyy-MM-dd HH:mm:ss");
                    }
                    node.Position=dr["position"].ToString();
                    node.Postbacktimes = dr["postbacktimes"].ToString();
                    if (dr["rtime"] != DBNull.Value)
                    {
                        node.LJLXTS = dr["lx"].ToString();
                    }
                    node.TerStatus = dr["ter_status"].ToString();
                    node.ReplyDataName = dr["replydataname"].ToString();
                    node.FXJG = "";
                    list.Add(node);
                }
            }

            return list;
        }

        #endregion

        /// <summary>
        /// 统计终端号列表
        /// </summary>
        /// <returns></returns>
        private ArrayList GetAllTerNoList(DataTable dt)
        {
            ArrayList terNos = new ArrayList();

            //统计终端号列表
            //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            
            int k = 0;
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                DataRow dr = dt.Rows[i];
                bool flg = true;
                if (terNos.Count > 0)
                {
                    foreach (DictionaryEntry e in terNos)
                    {
                        if (e.Value.Equals(dr["ter_no"].ToString()))
                        {
                            flg = false;
                            break;
                        }
                    }
                }
                if (flg)
                {
                    k++;
                    terNos.Add(new DictionaryEntry(k, dr["ter_no"].ToString()));
                }
            }
            return terNos;
        }

        /// <summary>
        /// 缓存 TerNos 列表
        /// </summary>
        /// <param name="ht"></param>
        /// <param name="dt"></param>
        /// <param name="key"></param>
        /// <returns></returns>
        private ArrayList GetAllTerNoList_Cache(Hashtable ht, DataTable dt,string key)
        {
            ArrayList terNos = new ArrayList();

            UserInfo user = new UserInfo();
            user = (UserInfo)System.Web.HttpContext.Current.Session["LoginUser"];

            string cacheArgsName = "Cur_UserArgs_" + user.UserLname + key + "_GetBJTJData";
            string cacheDataName = "Cur_User_" + user.UserLname + key + "_CacheTerNoList";

            bool loadFlag = false;

            if (System.Web.HttpContext.Current.Session[cacheArgsName] != null)
            {
                Hashtable _tmpHt = (Hashtable)System.Web.HttpContext.Current.Session[cacheArgsName];

                if (HashtableEquals(ht, _tmpHt))
                {
                    //查询条件相同，取缓存
                    if (System.Web.HttpContext.Current.Session[cacheDataName] != null)
                    {
                        terNos = (ArrayList)System.Web.HttpContext.Current.Session[cacheDataName];
                    }
                    else
                    {
                        loadFlag = true;
                    }
                }
                else
                {
                    //重新加载
                    loadFlag = true;
                }
            }
            else
            {
                //不存在,重新加载
                loadFlag = true;
            }

            if (loadFlag)
            {
                terNos = this.GetAllTerNoList(dt);

                System.Web.HttpContext.Current.Session[cacheArgsName] = ht;
                System.Web.HttpContext.Current.Session[cacheDataName] = terNos;
            }

            return terNos;
        }

        /// <summary>
        /// 统计终端号列表--识别分页
        /// </summary>
        /// <param name="ht"></param>
        /// <param name="AllTerNos"></param>
        /// <returns></returns>
        private ArrayList GetOutTerNoList(Hashtable ht, ArrayList AllTerNos)
        {
            int StartData = 0;
            int EndData = 15;

            if (ht["StartData"] != null
                && ht["StartData"].ToString().Trim().Length > 0)
            {
                StartData = Convert.ToInt32(ht["StartData"]);
            }
            if (ht["EndData"] != null
                && ht["EndData"].ToString().Trim().Length > 0)
            {
                EndData = Convert.ToInt32(ht["EndData"]);
            }

            ArrayList out_terNos = new ArrayList();
            if (AllTerNos.Count > 0)
            {
                foreach (DictionaryEntry e in AllTerNos)
                {
                    if ((Convert.ToInt32(e.Key) >= StartData)
                        && (Convert.ToInt32(e.Key) < EndData))
                    {
                        out_terNos.Add(e);
                    }
                }
            }

            return out_terNos;
        }

        #region 里程统计

        private DataTable GetData_CarReport_LCTJ_Cache(Hashtable ht)
        {
            DataTable dt = null;

            UserInfo user = new UserInfo();
            user = (UserInfo)System.Web.HttpContext.Current.Session["LoginUser"];

            string cacheArgsName = "Cur_UserArgs_" + user.UserLname + "_GetLCTJData";
            string cacheDataName = "Cur_User_" + user.UserLname + "_GetLCTJData";

            bool loadFlag = false;

            if (System.Web.HttpContext.Current.Session[cacheArgsName] != null)
            {
                Hashtable _tmpHt = (Hashtable)System.Web.HttpContext.Current.Session[cacheArgsName];

                if (HashtableEquals(ht, _tmpHt))
                {
                    //查询条件相同，取缓存
                    if (System.Web.HttpContext.Current.Session[cacheDataName] != null)
                    {
                        dt = (DataTable)System.Web.HttpContext.Current.Session[cacheDataName];
                    }
                    else
                    {
                        loadFlag = true;
                    }
                }
                else
                {
                    //重新加载
                    loadFlag = true;
                }
            }
            else
            {
                //不存在,重新加载
                loadFlag = true;
            }

            if (loadFlag)
            {
                dt = _iCarReportDao.GetCarReport_LCTJViewPage(ht);

                System.Web.HttpContext.Current.Session[cacheArgsName] = ht;
                System.Web.HttpContext.Current.Session[cacheDataName] = dt;
            }

            return dt;
        }

        public List<CarReport_LCTJView> GetCarReport_LCTJViewPage(Hashtable ht , out int rowCount)
        {
            List<CarReport_LCTJView> list = new List<CarReport_LCTJView>();

            //DataTable dt = _iCarReportDao.GetCarReport_LCTJViewPage(ht);
            //缓存
            //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            DataTable dt = this.GetData_CarReport_LCTJ_Cache(ht);

            if (dt == null || dt.Rows.Count == 0)
            {
                rowCount = 0;
                return list;
            }

            //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++

            //统计终端号列表
            //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            ArrayList terNos = GetAllTerNoList_Cache(ht, dt, "_lctj_");
            rowCount = terNos.Count;

            //识别分页
            //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            ArrayList out_terNos = GetOutTerNoList(ht, terNos);

            //组织输出对象列表
            return GetCarRptLCTJList(out_terNos, dt);
        }

        public List<CarReport_LCTJView> GetCarReport_LCTJViewToExcel(Hashtable ht)
        {
            List<CarReport_LCTJView> list = new List<CarReport_LCTJView>();

            //DataTable dt = _iCarReportDao.GetCarReport_LCTJViewPage(ht);
            //缓存
            //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            DataTable dt = this.GetData_CarReport_LCTJ_Cache(ht);

            if (dt == null || dt.Rows.Count == 0)
            {
                return list;
            }

            //统计终端号列表
            //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            ArrayList terNos = GetAllTerNoList_Cache(ht, dt, "_lctj_");

            //组织输出对象列表
            return GetCarRptLCTJList(terNos, dt);
        }

        private List<CarReport_LCTJView> GetCarRptLCTJList(ArrayList terNos,DataTable dt)
        {
            List<CarReport_LCTJView> list = new List<CarReport_LCTJView>();

            if (terNos.Count > 0)
            {
                foreach (DictionaryEntry e in terNos)
                {
                    DataRow[] foundRows = dt.Select(" TER_NO = '" + e.Value.ToString() + "'");

                    if (foundRows.Length > 0)
                    {
                        DataRow dr = foundRows[0];

                        CarReport_LCTJView node = new CarReport_LCTJView();

                        node.TerNo = dr["ter_no"].ToString();
                        node.TerTypeid = dr["ter_typeid"].ToString();
                        node.CarNo = dr["car_no"].ToString();

                        if (dr["rtime"] != DBNull.Value)
                        {
                            node.Rtime = Convert.ToDateTime(dr["rtime"]).ToString("yyyy-MM-dd HH:mm:ss");
                        }
                        node.Position=dr["position"].ToString();


                        double lc = 0;

                        if (foundRows.Length == 2)
                        {
                            DataRow dr1 = foundRows[1];

                            if ((dr["REMAINL_PCT"] != DBNull.Value)
                                && (dr1["REMAINL_PCT"] != DBNull.Value))
                            {
                                lc = int.Parse(dr1["REMAINL_PCT"].ToString(), System.Globalization.NumberStyles.HexNumber)
                                     - int.Parse(dr["REMAINL_PCT"].ToString(), System.Globalization.NumberStyles.HexNumber);

                                lc = lc / 1000;
                            }
                        }

                        node.LCTJ = lc;
                        node.FXJG = "";

                        list.Add(node);
                    }
                }
            }

            return list;
        }

        #endregion

        #region 公共函数

        private bool ObjectEquals(object obj1, object obj2)
        {
            if (obj1 != null
                    && obj2 != null
                    && obj2.Equals(obj1))
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        private bool HashtableEquals(Hashtable ht1, Hashtable ht2)
        {
            bool flg = true;

            if (ht1 != null && ht2 != null)
            {
                if (ObjectEquals(ht1["DeptId"], ht2["DeptId"]))
                {
                    flg = true;
                }
                else
                {
                    return false;
                }

                if (ObjectEquals(ht1["ShowChild"], ht2["ShowChild"]))
                {
                    flg = true;
                }
                else
                {
                    return false;
                }

                if (ht1["TerTypeNo"] != null
                    && ht2["TerTypeNo"] != null
                    && ht1["TerTypeNo"].Equals(ht2["TerTypeNo"]))
                {
                    flg = true;
                }
                else
                {
                    return false;
                }

                if (ht1["ObjTypeNo"] != null
                    && ht2["ObjTypeNo"] != null
                    && ht1["ObjTypeNo"].Equals(ht2["ObjTypeNo"]))
                {
                    flg = true;
                }
                else
                {
                    return false;
                }

                if (ht1["KeyText"] != null
                    && ht2["KeyText"] != null
                    && ht1["KeyText"].Equals(ht2["KeyText"]))
                {
                    flg = true;
                }
                else
                {
                    return false;
                }

                if (ht1["KSRQ"] != null
                    && ht2["KSRQ"] != null
                    && ht1["KSRQ"].Equals(ht2["KSRQ"]))
                {
                    flg = true;
                }
                else
                {
                    return false;
                }

                if (ht1["JSRQ"] != null
                    && ht2["JSRQ"] != null
                    && ht1["JSRQ"].Equals(ht2["JSRQ"]))
                {
                    flg = true;
                }
                else
                {
                    return false;
                }
            }
            else
            {
                return false;
            }

            return flg;
        }

        #endregion

        #region 在线统计

        public IList<CarReport_ZXTJView> GetZxtjViewPage(object o)
        {
            return _iCarReportDao.GetZxtjViewPage(o);
        }

        public int GetZxtjViewCount(object o)
        {
            return _iCarReportDao.GetZxtjViewCount(o);
        }

        #endregion

        #region 离线统计
        public IList<CarReport_LXTJView> GetLxtjViewPage(object o)
        {
            return _iCarReportDao.GetLxtjViewPage(o);
        }

        public int GetLxtjViewCount(object o)
        {
            return _iCarReportDao.GetLxtjViewCount(o);
        }
        #endregion 

        #region 里程报表
        public IList<CarReport_LCBBView> GetLcbbData(object o)
        {
            return _iCarReportDao.GetLcbbData(o);
        }

        public IList<CarReport_LCBBView> GetLcbbTodayData(object o)
        {
            return _iCarReportDao.GetLcbbTodayData(o);
        }
        #endregion 

        #region 疑似掉落和疑似拆除（原始计算方法）
        public void GetYsDC(Hashtable ht)
        {
            DataTable ysdl_dt = new DataTable();
            DataTable yscc_dt = new DataTable();
            DataTable ccdt = _iCarReportDao.GetCarReport_BJTJViewPage(ht);  //拆除设备表
            ColligateQueryService c = new ColligateQueryService();
            if (ccdt != null && ccdt.Rows.Count > 0)
            {
                ysdl_dt = ccdt.Clone();
                yscc_dt = ccdt.Clone();
                foreach (DataRow dr in ccdt.Rows)
                {
                    if (dr["ter_typeid"].ToString() == "0" || dr["ter_typeid"].ToString() == "1")
                    {
                        DateTime rtime = DateTime.Parse(dr["rtime"].ToString());
                        DateTime ctime = DateTime.Now.AddDays(-5);
                        if (rtime > ctime)
                        {
                            int flag = 1; //默认为疑似拆除
                            while (rtime > ctime)
                            {
                                string Stime = rtime.ToString("yyyy-MM-dd") + " 00:00:00";
                                string Etime = rtime.ToString("yyyy-MM-dd") + " 23:59:59";
                                string sql = "select latitude,longitude from historical_data where rtime between to_date('" + Stime + "','yyyy-MM-dd hh24:mi:ss') and to_date('" + Etime + "','yyyy-MM-dd hh24:mi:ss')";
                                System.Data.DataSet ds = c.GetColligateQuery("ColligateQuery.ProteanQuery", sql);
                                if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                                {
                                    double dwLongs = double.Parse(ds.Tables[0].Rows[0]["longitude"].ToString());
                                    double dwLats = double.Parse(ds.Tables[0].Rows[0]["latitude"].ToString());
                                    double dwLonge = double.Parse(ds.Tables[0].Rows[ds.Tables[0].Rows.Count - 1]["longitude"].ToString());
                                    double dwLate = double.Parse(ds.Tables[0].Rows[ds.Tables[0].Rows.Count - 1]["latitude"].ToString());
                                    double lengthse = this.GetDistance(dwLongs, dwLats, dwLonge, dwLate);
                                    if (lengthse > 2000)
                                    {
                                        flag = 2;
                                        break;
                                    }
                                    else
                                    {
                                        for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                                        {
                                            if (i + 1 < ds.Tables[0].Rows.Count)
                                            {
                                                double dwLong1 = double.Parse(ds.Tables[0].Rows[i]["longitude"].ToString());
                                                double dwLat1 = double.Parse(ds.Tables[0].Rows[i]["latitude"].ToString());
                                                double dwLong2 = double.Parse(ds.Tables[0].Rows[i + 1]["longitude"].ToString());
                                                double dwLat2 = double.Parse(ds.Tables[0].Rows[i + 1]["latitude"].ToString());
                                                double length = this.GetDistance(dwLong1, dwLat1, dwLong2, dwLat2);
                                                if (length > 2000)
                                                {
                                                    flag = 2;
                                                    break;
                                                }
                                            }
                                        }
                                        if (flag == 2)
                                        {
                                            break;
                                        }
                                    }
                                }
                                rtime = rtime.AddDays(-1);
                            }
                            if (flag == 1)
                            {
                                DataRow newdr = yscc_dt.NewRow();
                                foreach (DataColumn column in ccdt.Columns)
                                {
                                    newdr[column.ColumnName] = dr[column.ColumnName];
                                }
                                yscc_dt.Rows.Add(newdr);
                            }
                            else
                            {
                                DataRow newdr = ysdl_dt.NewRow();
                                foreach (DataColumn column in ccdt.Columns)
                                {
                                    newdr[column.ColumnName] = dr[column.ColumnName];
                                }
                                ysdl_dt.Rows.Add(newdr);
                            }

                        }
                        else
                        {
                            DataRow newdr = yscc_dt.NewRow();
                            foreach (DataColumn column in ccdt.Columns)
                            {
                                newdr[column.ColumnName] = dr[column.ColumnName];
                            }
                            yscc_dt.Rows.Add(newdr);
                        }
                    }
                }
            }
        }
        #endregion

        public IList<CarReport_TerData> GetTjbbTerData(Hashtable ht)
        {
            return _iCarReportDao.GetTjbbTerData(ht);
        }

        public int GetTjbbTerDataCount(Hashtable ht)
        {
            return _iCarReportDao.GetTjbbTerDataCount(ht);
        }
    }
}