// Generated by IBatisNetModel

using System;
using System.Collections;

using GModel.Car;
using GInterfaceDAL.Car;
using GDAL.Car;
using System.Collections.Generic;
using GModel.Basic;
using GBLL.Basic;
using GModel.Location;

namespace GBLL.Car
{
    public class TerminalInfoBLL
    {
        private ITerminalInfoDao _iTerminalInfoDao = null;
        private ICarTypeDao _iCarTypeDao = null;
        private IProductsInfoDao _iProductsInfoDao = null;
        public TerminalInfoBLL()
        {
            _iTerminalInfoDao = new TerminalInfoDao();
            _iCarTypeDao = new CarTypeDao();
            _iProductsInfoDao = new ProductsInfoDao();
        }

        public TerminalInfo GetTerminalInfo(object o)
        {
            return _iTerminalInfoDao.GetTerminalInfo(o);
        }

        public TerminalInfo GetTerminalInfoByTerNo(object o)
        {
            return _iTerminalInfoDao.GetTerminalInfoByTerNo(o);
        }

        public IList<TerminalInfo> GetTerminalInfoByCarId(object o)
        {
            return _iTerminalInfoDao.GetTerminalInfoByCarId(o);
        }

        public IList<TerminalInfo> GetTerminalInfoByDeptId(string o)
        {
            if (o != null && o.Trim() != "")
            {
                return _iTerminalInfoDao.GetTerminalInfoByDeptId(o);
            }
            else
            {
                return null;
            }

        }

        public int GetTerminalInfoCount(object o)
        {
            return _iTerminalInfoDao.GetTerminalInfoCount(o);
        }

        public int Insert(TerminalInfo entity)
        {
            object o = _iTerminalInfoDao.Insert(entity);
            return Convert.ToInt32(o);
        }

        public int Update(TerminalInfo entity)
        {
            return _iTerminalInfoDao.Update(entity);
        }

        public string Delete(string condition)
        {
            return _iTerminalInfoDao.Delete(condition);
        }

        public string BindTerCar(string TerIds, string CarId)
        {

            return _iTerminalInfoDao.BindTerCar(TerIds, CarId);
        }

        public IList<GetterpositionView> GetterpositionViewPage(GetterpositionView gpv)
        {
            return _iTerminalInfoDao.GetterpositionViewPage(gpv);
        }

        public int GetterpositionViewCount(GetterpositionView gpv)
        {
            return _iTerminalInfoDao.GetterpositionViewCount(gpv);
        }

        public string AddCarAndTer(TerminalBind tib)
        {
            return _iTerminalInfoDao.AddCarAndTer(tib);
        }

        public IList<TerminalBind> GetTerminalBindPage(object o)
        {
            return _iTerminalInfoDao.GetTerminalBindPage(o);
        }

        public int GetTerminalBindCount(object o)
        {
            return _iTerminalInfoDao.GetTerminalBindCount(o);
        }

        public int GetTerminalCountByCarId(string CarID)
        {
            return _iTerminalInfoDao.GetTerminalByCarId(CarID);
        }

        public string RemoveBind(string TerGuids)
        {
            if (TerGuids != null && TerGuids.Trim() != "")
            {
                return _iTerminalInfoDao.RemoveBind(TerGuids.Trim(','));
            }
            else
            {
                return "false";
            }
        }

        public string InsertExcelData(string DeptId, List<UpLoadTerBind> lut)
        {
            string returnVal = "";
            string TerNoStr = "";
            Hashtable htTerType = new Hashtable();
            TerminalInfoBLL terminalInfoBll = new TerminalInfoBLL();
            ProductsInfo pi = new ProductsInfo();
            IList<ProductsInfo> lpt = _iProductsInfoDao.GetProductsInfoPage(pi);
            for (int n = 0; n < lpt.Count; n++)
            {
                if (!htTerType.ContainsKey(lpt[n].ProName))
                {
                    htTerType.Add(lpt[n].ProName, lpt[n].ProId);
                }
            }
            for (int m = 0; m < lut.Count; m++)
            {
                if (string.IsNullOrEmpty(lut[m].TerNo)|| string.IsNullOrEmpty(lut[m].SimCard) || string.IsNullOrEmpty(lut[m].TerType))
                {
                    TerNoStr += lut[m].TerNo + ",";
                    continue;
                }
                if (htTerType.ContainsKey(lut[m].TerType) == true && lut[m].TerNo.Trim() != "")
                {
                    string val = _iTerminalInfoDao.upLoadData(lut[m], DeptId);
                    if (val != "true")
                    {
                        TerNoStr += lut[m].TerNo + ",";
                    }
                }
                else
                {
                    TerNoStr += lut[m].TerNo + ",";
                }
            }

            if (TerNoStr.Trim() != "")
            {
                returnVal += "终端号：" + TerNoStr+"导入有问题!";
            }
            if (returnVal.Trim() == "")
            {
                returnVal = "true";
            }
            return returnVal;
        }

        public int TerExChange(TerminalInfo entity,bool flag)
        {
            if (entity.TerGuid != null && entity.TerGuid.Trim() != "")
            {
                string TerGuids = "";
                string RealTerNos = "";
                string[] TerArr = entity.TerGuid.Trim(',').Split(',');

                for (int i = 0; i < TerArr.Length; i++)
                {
                     DeptInfoBLL deptInfoBll = new DeptInfoBLL();
                     TerminalInfo terinfo = this.GetTerminalInfo(TerArr[i]);
                     DeptInfo scdi = deptInfoBll.GetDeptInfo("dabf8b57-75a3-43f8-b540-03fefc9e43c3"); //生产测试的类
                     if (terinfo.TerDeptcode.StartsWith(scdi.Businessdivisioncode))
                     {
                         RealTerNos += "'" + terinfo.TerNo + "',";
                     }
                     TerGuids += "'" + TerArr[i] + "',";
                }
                entity.TerGuid = TerGuids.Trim(',');
                if (RealTerNos.Trim(',') != "" && flag==false)
                {
                    entity.TerNo = RealTerNos.Trim(',');
                    int result=_iTerminalInfoDao.SetReplyRealdata(entity);
                }
                int k=_iTerminalInfoDao.CarExChange(entity);
                return _iTerminalInfoDao.TerExChange(entity);
            }
            else
            {
                return 0;
            }
        }

        public IList<TercensusData> GetTercensusData(Hashtable ht)
        {
            return _iTerminalInfoDao.GetTercensusData(ht);
        }

        public int GetTercensusDataCount(Hashtable ht)
        {
            return _iTerminalInfoDao.GetTercensusDataCount(ht);
        }

    }
}
