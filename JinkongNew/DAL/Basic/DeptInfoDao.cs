// Generated by IBatisNetModel

using System;

using GInterfaceDAL.Basic;
using System.Collections.Generic;
using GModel.Basic;
using IBatisNet.DataMapper;

namespace GDAL.Basic
{
    public class DeptInfoDao : BaseSqlMapDao, IDeptInfoDao
    {
        public object Insert(DeptInfo entity)
        {
            ISqlMapper NewMap = SqlMapper.Instance();
            NewMap.BeginTransaction();
            try
            {
                DeptInfo dif = (DeptInfo)ExecuteQueryForObjectTrans("DeptInfo.SelectDeptInfo", entity.Fatherid, NewMap);
                object d = ExecuteQueryForObjectTrans("DeptInfo.SelectDeptCountByDeptName", entity.Businessdivisionname, NewMap);
                if (dif == null)
                {
                    NewMap.CommitTransaction();
                    return "父企业不存在！";
                }else if((int)d >0){
                    NewMap.CommitTransaction();
                    return "该企业已经存在！";
                
                }
                else
                {
                    IList<DeptInfo> dil = ExecuteQueryForListTrans<DeptInfo>("DeptInfo.SelectAllChildrenDeptInfo", dif.Businessdivisioncode, NewMap);
                    if (dil.Count == 1)
                    {
                        entity.Businessdivisioncode = dif.Businessdivisioncode + "0001";
                    }
                    else
                    {
                        DeptInfo di = new DeptInfo();
                        di.Businessdivisioncode = dif.Businessdivisioncode + "0000";
                        dil[0] = di;
                        int newCode = 0;
                        for (int i = 0; i < dil.Count; i++)
                        {
                            if (i < (dil.Count - 1))
                            {

                                int a = Convert.ToInt32(dil[i].Businessdivisioncode.Substring(dil[i].Businessdivisioncode.Length - 4, 4));
                                string nn = dil[i + 1].Businessdivisioncode.Substring(dil[i + 1].Businessdivisioncode.Length - 4, 4);
                                string mm = nn;
                                int b = Convert.ToInt32(dil[i + 1].Businessdivisioncode.Substring(dil[i + 1].Businessdivisioncode.Length - 4, 4));
                                if ((a + 1) < b)
                                {
                                    newCode = (a + 1);
                                }
                            }
                        }

                        if (newCode == 0)
                        {
                            newCode = Convert.ToInt32(dil[dil.Count - 1].Businessdivisioncode.Substring(dil[dil.Count - 1].Businessdivisioncode.Length - 4, 4)) + 1;
                        }
                        //entity.Businessdivisioncode = (Convert.ToInt64(dil[0].Businessdivisioncode) + 1).ToString().PadLeft(dil[0].Businessdivisioncode.Length, '0');
                        entity.Businessdivisioncode = dif.Businessdivisioncode + newCode.ToString().PadLeft(4, '0');
                    }
                    entity.Businessdivisionid = System.Guid.NewGuid().ToString();
                    ExecuteInsertTrans("DeptInfo.InsertDeptInfo", entity, NewMap);
                    NewMap.CommitTransaction();
                    return "true";
                }
            }
            catch (Exception e)
            {
                NewMap.RollBackTransaction();
                return "false";
            }
        }

        /// <summary>
        /// 修改企业的信息，当企业的父企业改变时，要根据企业编码修改企业
        /// </summary>
        /// <param name="entity">企业</param>
        /// <returns></returns>
        public int Update(DeptInfo entity, List<string> OldDeptCode, List<string> NewDeptCode)
        {
            ISqlMapper NewMap = SqlMapper.Instance();
            NewMap.BeginTransaction();
            try
            {
                int count = 0;
                //查询出父企业
                DeptInfo di = (DeptInfo)ExecuteQueryForObjectTrans("DeptInfo.SelectDeptInfo", entity.Fatherid, NewMap);
                //if (!entity.Businessdivisioncode.StartsWith(di.Businessdivisioncode))
                //{
                    IList<DeptInfo> dil = ExecuteQueryForListTrans<DeptInfo>("DeptInfo.SelectMaxCodeDeptInfo", di.Businessdivisioncode, NewMap);
                    if (dil[0].Businessdivisioncode == di.Businessdivisioncode)
                    {
                        OldDeptCode.Add(entity.Businessdivisioncode);
                        entity.Businessdivisioncode = di.Businessdivisioncode + "0001";
                        NewDeptCode.Add(entity.Businessdivisioncode);
                    }
                    else
                    {
                        var oldcode = dil[0].Businessdivisioncode.Substring(dil[0].Businessdivisioncode.Length-4,4);
                        OldDeptCode.Add(entity.Businessdivisioncode);
                        entity.Businessdivisioncode = dil[0].Businessdivisioncode.Substring(0,dil[0].Businessdivisioncode.Length - 4)+(Convert.ToInt64(oldcode) + 1).ToString().PadLeft(4, '0');
                        NewDeptCode.Add(entity.Businessdivisioncode);
                    }
                    GetDeptchild(entity,OldDeptCode,NewDeptCode);
                    count = ExecuteUpdateTrans("DeptInfo.UpdateDeptInfoInCode", entity, NewMap);
                //}
                //else
                //{
                //    if (entity.Fatherid.Equals(entity.Businessdivisionid)) {
                //        entity.Fatherid = "";
                //    }
                //    count = ExecuteUpdateTrans("DeptInfo.UpdateDeptInfo", entity, NewMap);
                //}
                NewMap.CommitTransaction();
                return count;
            }
            catch (Exception e)
            {
                NewMap.RollBackTransaction();
                return -1;
            }
        }

        //得到该企业的子企业(改变其code)
        public void GetDeptchild(DeptInfo entity,List<string> OldDeptCode,List<string> NewDeptCode)
        {
            ISqlMapper NewMap = SqlMapper.Instance();
            IList<DeptInfo> dil = ExecuteQueryForListTrans<DeptInfo>("DeptInfo.SelectChildDeptInfo", entity.Businessdivisionid, NewMap);
            if (dil.Count > 0)
            { 
                foreach(DeptInfo di in dil)
                {
                    OldDeptCode.Add(di.Businessdivisioncode);
                    di.Businessdivisioncode = entity.Businessdivisioncode + di.Businessdivisioncode.Substring(di.Businessdivisioncode.Length-4,4);
                    NewDeptCode.Add(di.Businessdivisioncode);
                    ExecuteUpdateTrans("DeptInfo.UpdateDeptInfoInCode", di, NewMap);
                    GetDeptchild(di, OldDeptCode, NewDeptCode);
                }
            }
        }

        /// <summary>
        /// 假删除
        /// </summary>
        /// <param name="condition"></param>
        /// <returns></returns>
        public int Delete(object condition)
        {
            int k = 0;
            ISqlMapper NewMap = SqlMapper.Instance();
            NewMap.BeginTransaction();
            try
            {
                //查询该企业下有没有车或者终端，如果有，提示转移车或终端再删除。
                object countCar = ExecuteQueryForObjectTrans("CarInfo.SelectCarCountByDeptId", condition, NewMap);
                object countTer = ExecuteQueryForObjectTrans("TerminalInfo.SelectTerminalCountByDeptId", condition, NewMap);
                if ((int)countCar > 0 && (int)countTer > 0)
                {
                    k = -1;

                }
                else if ((int)countCar > 0)
                {
                    k = -2;

                }
                else if ((int)countTer > 0)
                {
                    k = -3;
                }
                else
                {
                    k = ExecuteUpdateTrans("DeptInfo.DeleteDeptInfo", condition, NewMap);
                }
                NewMap.CommitTransaction();
                return k;
            }
            catch (Exception e)
            {
                NewMap.RollBackTransaction();
                return -4;
            }
        }

        public int DeleteChildren(object DeptId)
        {
            int k = 0;
            ISqlMapper NewMap = SqlMapper.Instance();
            NewMap.BeginTransaction();
            try
            {   //查询该企业下有没有车或者终端，如果有，提示转移车或终端再删除。
                object countCar = ExecuteQueryForObjectTrans("CarInfo.SelectCarInfoCountByDeptId", DeptId, NewMap);
                object countTer = ExecuteQueryForObjectTrans("TerminalInfo.SelectTerminalInfoCountByDeptId", DeptId, NewMap);
                if ((int)countCar > 0 && (int)countTer > 0)
                {
                    k = -1;

                }
                else if ((int)countCar > 0)
                {
                    k = -2;

                }
                else if ((int)countTer > 0)
                {
                    k = -3;
                }
                else
                {
                    k = ExecuteUpdateTrans("DeptInfo.DeleteDeptByDeptId", DeptId, NewMap);
                }
                NewMap.CommitTransaction();
                return k;
            }
            catch (Exception e)
            {
                NewMap.RollBackTransaction();
                return -4;
            }
        }

        public int GetDeptCountByFatherId(string DeptId)
        {
            object count = ExecuteQueryForObject("DeptInfo.SelectDeptInfoCountByFatherId", DeptId);
            return (int)count;
        }

        public DeptInfo GetDeptInfoById(string DeptId)
        {
            return (DeptInfo)ExecuteQueryForObject("DeptInfo.SelectDeptInfo", DeptId);
        }

        public DeptInfo GetDeptInfoByCode(string DeptCode)
        {
            return (DeptInfo)ExecuteQueryForObject("DeptInfo.SelectDeptInfoByCode", DeptCode);
        }

        //public IList<DeptInfo> GetDeptInfoList(object o)
        //{
        //      return ExecuteQueryForList<DeptInfo>("DeptInfo.SelectDeptInfo", o);  
        //}

        public IList<DeptInfo> GetDeptInfoPage(object o)
        {
            return ExecuteQueryForList<DeptInfo>("DeptInfo.SelectDeptInfoPage", o);
        }

        public int GetDeptInfoCount(object o)
        {
            object count = ExecuteQueryForObject("DeptInfo.SelectDeptInfoCount", o);
            return (int)count;
        }
    }
}
