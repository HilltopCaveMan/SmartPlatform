// Generated by IBatisNetModel

using System;
using GInterfaceDAL.Car;
using System.Collections.Generic;
using GModel.Car;
using System.Collections;
using IBatisNet.DataMapper;
using GModel.Basic;
using IBatisNet.DataMapper.MappedStatements;

namespace GDAL.Car
{
    public class CarInfoDao : BaseSqlMapDao, ICarInfoDao
    {
        public object Insert(CarInfo entity)
        {
            return ExecuteInsert("CarInfo.InsertCarInfo", entity);
        }

        public int Update(CarInfo entity)
        {
            return ExecuteUpdate("CarInfo.UpdateCarInfo", entity);
        }

        public string Delete(object condition,bool RemoveTerno)
        {
            ISqlMapper NewMap = SqlMapper.Instance();
            NewMap.BeginTransaction();
            try
            {
                if (RemoveTerno == true)
                {
                    ExecuteUpdateTrans("TerminalInfo.TerminalRemoveBindByGuid", condition, NewMap);
                    NewMap.CommitTransaction();
                }
                else
                {
                    //根据车全部删除
                    ExecuteUpdateTrans("TerminalInfo.TerminalRemoveBind", condition, NewMap);
                    //删除跟更改调同一个方法。
                    ExecuteUpdateTrans("CarInfo.DeleteCarInfo", condition, NewMap);
                    ExecuteUpdateTrans("FieldValues.DeleteFieldValues", condition, NewMap);
                    NewMap.CommitTransaction();
                }
                return "true";
            }
            catch (Exception e)
            {
                NewMap.RollBackTransaction();
                return "false";
            }
        }

        CarInfo ICarInfoDao.GetCarInfoByCarNo(object carno)
        {
            return (CarInfo)ExecuteQueryForObject("CarInfo.SelectCarByCarNo", carno);
        }

        CarInfo ICarInfoDao.GetCarInfoByCarId(object carid)
        {
            return (CarInfo)ExecuteQueryForObject("CarInfo.SelectCarByCarId", carid);
        }

        public IList<CarInfo> GetCarInfoPage(object o)
        {
            return ExecuteQueryForList<CarInfo>("CarInfo.SelectCarInfoPage", o);
        }

        public int GetCarInfoCount(object o)
        {
            object count = ExecuteQueryForObject("CarInfo.SelectCarInfoCount", o);
            return (int)count;
        }

        public string InsertCarInfo(ArrayList arr)
        {
            ISqlMapper NewMap = SqlMapper.Instance();
            NewMap.BeginTransaction();
            CarInfo ci = new CarInfo();
            try
            {
                for (int i = 0; i < arr.Count; i++)
                {
                    Type typeName = arr[i].GetType();
                    switch (typeName.FullName)
                    {
                        case "GModel.Car.CarInfo":
                            ci = (CarInfo)arr[i];
                            ExecuteInsertTrans("CarInfo.InsertCarInfo", (CarInfo)arr[i], NewMap);
                            break;

                        case "GModel.Car.FieldValues":
                            FieldValues fv = (FieldValues)arr[i];
                            if(fv !=null && fv.FieldValue.Trim() !="")
                            {
                                ExecuteInsertTrans("FieldValues.InsertFieldValues", fv, NewMap);
                            }
                            break;

                        case "System.String":
                            TerminalInfo ti = new TerminalInfo();
                            ti.CarId = ci.CarId;
                            ti.TerGuid = arr[i].ToString();
                            ExecuteUpdateTrans("TerminalInfo.BindTerCar", ti,NewMap);
                            break;
                    }
                }
                NewMap.CommitTransaction();
                return "true";
            }
            catch (Exception e)
            {
                NewMap.RollBackTransaction();
                return "false";
            }
        }

        public string InsertCarInfo(ArrayList arr,string CarTypeName)
        {
            ISqlMapper NewMap = SqlMapper.Instance();
            NewMap.BeginTransaction();
            CarInfo ci = new CarInfo();
            try
            {
                for (int i = 0; i < arr.Count; i++)
                {
                    Type typeName = arr[i].GetType();
                    switch (typeName.FullName)
                    {
                        case "GModel.Car.CarInfo":
                            ci = (CarInfo)arr[i];
                            if (ci.TypeId == null || ci.TypeId.ToString().Trim() == "")
                            {
                                CarType ct = new CarType();
                                ct.TypeId = System.Guid.NewGuid().ToString();
                                ct.TypeName = CarTypeName;
                                ct.DeptId = ci.Businessdivisionid;
                                ct.TypeIsdel = "0";
                                ExecuteInsertTrans("CarType.InsertCarType", ct, NewMap);
                                ci.TypeId = ct.TypeId;
                                ExecuteInsertTrans("CarInfo.InsertCarInfo", ci, NewMap);
                                //ExecuteUpdateTrans("CarInfo.UpdateCarInfoByCarNo", ci, NewMap); 
                            }
                            else {
                                ExecuteInsertTrans("CarInfo.InsertCarInfo", ci, NewMap);
                                //ExecuteUpdateTrans("CarInfo.UpdateCarInfoByCarNo", ci, NewMap); 
                            }
                            break;

                        case "GModel.Car.FieldValues":
                            FieldValues fv = (FieldValues)arr[i];
                            if (fv != null && fv.FieldValue.Trim() != "")
                            {
                                ExecuteInsertTrans("FieldValues.InsertFieldValues", fv, NewMap);
                            }
                            break;

                        case "System.String":
                            string[] brr = new string[]{};
                            brr = arr[i].ToString().Split(',');
                            for(int j=0;j<brr.Length;j++)
                            { 
                                TerminalInfo ti = new TerminalInfo();
                                ti.CarId = ci.CarId;
                                ti.TerCarno = ci.CarNo;
                                ti.DeptId = ci.Businessdivisionid;
                                ti.TerDeptcode = ci.CarDeptcode;
                                ti.TerGuid = brr[j].ToString();
                                ExecuteUpdateTrans("TerminalInfo.BindTerCar", ti, NewMap);
                            }
                            break;
                    }
                }
                NewMap.CommitTransaction();
                return "true";
            }
            catch (Exception e)
            {
                NewMap.RollBackTransaction();
                return "false";
            }
        }

        public string UpdateCarInfo(ArrayList arr)
        {
            ISqlMapper NewMap = SqlMapper.Instance();
            NewMap.BeginTransaction();
            try
            {
                for (int i = 0; i < arr.Count; i++)
                {
                    Type typeName = arr[i].GetType();
                    switch (typeName.FullName)
                    {
                        case "GModel.Car.CarInfo":
                            ExecuteUpdateTrans("CarInfo.UpdateCarInfo", (CarInfo)arr[i], NewMap);
                            break;
                        case "GModel.Car.FieldValues":
                            if (((FieldValues)arr[i]).FieldId.Trim() != "")
                            {
                                ExecuteUpdateTrans("FieldValues.UpdateFieldValues", (FieldValues)arr[i], NewMap);
                            }
                            else
                            {
                                FieldValues fv = (FieldValues)arr[i];
                                fv.FieldId = System.Guid.NewGuid().ToString();
                                ExecuteInsertTrans("FieldValues.InsertFieldValues", fv, NewMap);
                            }
                            break;
                    }
                }
                NewMap.CommitTransaction();
                return "true";
            }
            catch (Exception e)
            {
                NewMap.RollBackTransaction();
                return "false";
            }
        }

        public string UpdateCarInfo(ArrayList arr, string CarTypeName)
        {
            ISqlMapper NewMap = SqlMapper.Instance();
            NewMap.BeginTransaction();
            try
            {
                for (int i = 0; i < arr.Count; i++)
                {
                    Type typeName = arr[i].GetType();
                    switch (typeName.FullName)
                    {
                        case "GModel.Car.CarInfo":
                            CarInfo ci=(CarInfo)arr[i];
                            if (ci.TypeId == null || ci.TypeId.ToString().Trim() == "")
                            {
                                CarType ct = new CarType();
                                ct.TypeId = System.Guid.NewGuid().ToString();
                                ct.TypeName = CarTypeName;
                                ct.DeptId = ci.Businessdivisionid;
                                ct.TypeIsdel = "0";
                                ExecuteInsertTrans("CarType.InsertCarType", ct, NewMap);
                                ci.TypeId = ct.TypeId;
                                ExecuteUpdateTrans("CarInfo.UpdateCarInfo", ci, NewMap); // ExecuteUpdateTrans("CarInfo.UpdateCarInfo", ci, NewMap);
                            }
                            else
                            {
                                ExecuteUpdateTrans("CarInfo.UpdateCarInfo", ci, NewMap); // ExecuteUpdateTrans("CarInfo.UpdateCarInfo", ci, NewMap);
                            }
                            //修改终端的对应信息
                            ExecuteUpdateTrans("CarInfo.UpdateTerInfoByCarId", ci, NewMap);
                            TerminalInfo ti = new TerminalInfo();
                            ti.CarId = ci.CarId;
                            ti.TerCarno = ci.CarNo;
                            ExecuteUpdateTrans("TerminalInfo.UpdateTerCarNo", ti, NewMap);
                            break;
                        case "GModel.Car.FieldValues":
                            if (((FieldValues)arr[i]).FieldId.Trim() != "")
                            {
                                ExecuteUpdateTrans("FieldValues.UpdateFieldValues", (FieldValues)arr[i], NewMap);
                            }
                            else
                            {
                                FieldValues fv = (FieldValues)arr[i];
                                fv.FieldId = System.Guid.NewGuid().ToString();
                                ExecuteInsertTrans("FieldValues.InsertFieldValues", fv, NewMap);
                            }
                            break;
                    }
                }
                NewMap.CommitTransaction();
                return "true";
            }
            catch (Exception e)
            {
                NewMap.RollBackTransaction();
                return "false";
            }
        }

        public string UpdateCarType(CarInfo ci,string CarTypeName)
        {
            ISqlMapper NewMap = SqlMapper.Instance();
            NewMap.BeginTransaction();
            try
            {
                if (ci.TypeId == null || ci.TypeId.ToString().Trim() == "")
                {
                    CarType ct = new CarType();
                    ct.TypeId = System.Guid.NewGuid().ToString();
                    ct.TypeName = CarTypeName;
                    ct.DeptId = ci.Businessdivisionid;
                    ct.TypeIsdel = "0";
                    ExecuteInsertTrans("CarType.InsertCarType", ct, NewMap);
                    ci.TypeId = ct.TypeId;
                    ExecuteUpdateTrans("CarInfo.UpdateCarInfoByCarNo", ci, NewMap);
                }
                else
                {
                    ExecuteUpdateTrans("CarInfo.UpdateCarInfoByCarNo", ci, NewMap);
                }
                NewMap.CommitTransaction();
                return "true";
            }
            catch (Exception e)
            {
                NewMap.RollBackTransaction();
                return "false";
            }
        }

        //备份
        /*
        public string upLoadData(UpLoadTerBind ut, string DeptId)
        {
            ISqlMapper NewMap = SqlMapper.Instance();
            NewMap.BeginTransaction();
            try
            {
                IMappedStatement im = NewMap.GetMappedStatement("CarType.SelectCarType");
                string aa = GetSql("CarType.SelectCarType", null, im);

                CarType ct = (CarType)ExecuteQueryForObjectTrans("CarType.SelectCarType", ut.CarType, NewMap);
                CarInfo ci = (CarInfo)ExecuteQueryForObjectTrans("CarInfo.SelectCarInfo", ut.CarNo, NewMap);
                
                if (ct == null)
                {
                    ct = new CarType();
                    ct.TypeId = System.Guid.NewGuid().ToString();
                    ct.TypeName = ut.CarType;
                    ct.DeptId = DeptId;
                    ct.TypeIsdel = "0";
                    ExecuteInsertTrans("CarType.InsertCarType", ct, NewMap);
                }
                if(ci==null)
                {
                    ci = new CarInfo();
                    ci.CarId = System.Guid.NewGuid().ToString();
                    ci.CarNo = ut.CarNo;
                    ci.TypeId = ct.TypeId;
                    ci.Businessdivisionid = DeptId;
                    if (ci.Businessdivisionid != null || ci.Businessdivisionid.Trim() != "")
                    {
                        GDAL.Basic.DeptInfoDao deptInfoBll = new GDAL.Basic.DeptInfoDao();
                        DeptInfo di = deptInfoBll.GetDeptInfo(ci.Businessdivisionid);
                        ci.CarDeptcode = di.Businessdivisioncode;
                    }
                    ExecuteInsertTrans("CarInfo.InsertCarInfo", ci, NewMap);
                }
               
                TerminalInfo ti = (TerminalInfo)ExecuteQueryForObjectTrans("TerminalInfo.SelectTerminalInfoByTerNo", ut.TerNo, NewMap);
                if (ti == null)
                {
                    NewMap.CommitTransaction();
                    return "不存在终端号:"+ut.TerNo;
                    
                }
                else if ( ti.CarId !=null && ti.CarId.Trim() != "")
                {
                    NewMap.CommitTransaction();
                    return "已经被绑定:" + ti.TerNo;
                }
                else
                {
                    ti.CarId = ci.CarId;
                    ExecuteUpdate("TerminalInfo.BindTerCar", ti);
                    NewMap.CommitTransaction();
                    return "true";
                }
            }
            catch (Exception e)
            {
                NewMap.RollBackTransaction();
                return "false";
            }
        }
        */

        public string upLoadData(UpLoadTerBind ut, string DeptId)
        {
            ISqlMapper NewMap = SqlMapper.Instance();

            try
            {
                NewMap.BeginTransaction();

                //不加是否有这个车辆的判断
                //CarInfo ci = (CarInfo)ExecuteQueryForObjectTrans("CarInfo.SelectCarInfo", ut.CarNo, NewMap);
                CarInfo ci = null;
                if (ci == null)
                {
                    ci = new CarInfo();
                    ci.CarId = System.Guid.NewGuid().ToString();
                    ci.CarNo = ut.CarNo;
                    if (ut.CarType != null && ut.CarType != "")
                    {
                        ci.TypeId = ut.CarType; //ct.TypeId;
                    }
                    //终端所属企业
                    ci.Businessdivisionid = (ut.BusinessDivisionId == "" || ut.BusinessDivisionId == null) ? DeptId : ut.BusinessDivisionId;
                    if (ci.Businessdivisionid != null && ci.Businessdivisionid.Trim() != "")
                    {
                        GDAL.Basic.DeptInfoDao deptInfoBll = new GDAL.Basic.DeptInfoDao();
                        DeptInfo di = deptInfoBll.GetDeptInfoById(ci.Businessdivisionid);
                        ci.CarDeptcode = di.Businessdivisioncode;
                    }

                    //++++++++++++++++++++++++++++++++++++++++++++++++
                    //新添加
                    //++++++++++++++++++++++++++++++++++++++++++++++++
                    if (ut.CarAdminName != null
                        && ut.CarAdminName.Trim().Length > 0)
                    {
                        ci.CarAdminName = ut.CarAdminName;
                    }
                    if (ut.CarAdminCardId != null
                        && ut.CarAdminCardId.Trim().Length > 0)
                    {
                        ci.CarAdminCardid = ut.CarAdminCardId;
                    }
                    ci.CarColor = ut.CarColor;
                    ci.OwerAddress = ut.OwerAddress;
                    ci.OwerPhone = ut.OwerPhone;
                    ci.InstallName = ut.InstallName;
                    ci.InstallAddress = ut.InstallAddress;
                    ci.InstallPhone = ut.InstallPhone;
                    ci.InstallPlace = ut.InstallPlace;
                    ci.InstallTime = ut.InstallTime;
                    ci.EntryName = ut.EntryName;
                    ci.EntryPhone = ut.EntryPhone;
                    ci.SafeOrder = ut.SafeOrder;
                    ci.LoanMoney = ut.LoanMoney;
                    ci.LoanYear = ut.LoanYear;
                    ci.CarModel = ut.CarModel;
                    ci.EngineNumber = ut.EngineNumber;
                    ci.CarFrame = ut.CarFrame;
                    ci.Description = ut.Description;
                    ci.ContractNum = ut.ContractNum;
                    //++++++++++++++++++++++++++++++++++++++++++++++++

                    ExecuteInsertTrans("CarInfo.InsertCarInfo", ci, NewMap);

                    //添加用户自定义信息数据
                    //if (ut.FieldValuesList.Count > 0)
                    //{
                    //    foreach (FieldValues fv in ut.FieldValuesList)
                    //    {
                    //        //修正车辆ID属性
                    //        fv.CarId = ci.CarId;

                    //        //保存
                    //        ExecuteInsertTrans("FieldValues.InsertFieldValues", fv, NewMap);
                    //    }
                    //}
                }

                TerminalInfo ti = (TerminalInfo)ExecuteQueryForObjectTrans("TerminalInfo.SelectTerminalInfoByTerNo", ut.TerNo, NewMap);
                if (ti == null)
                {
                    NewMap.CommitTransaction();
                    return "不存在终端号:" + ut.TerNo;
                }
                else if (ti.CarId != null && ti.CarId.Trim() != "")
                {
                    NewMap.CommitTransaction();
                    return "已经被绑定:" + ti.TerNo;
                }
                else
                {
                    ti.CarId = ci.CarId;
                    ExecuteUpdate("TerminalInfo.BindTerCar", ti);
                    NewMap.CommitTransaction();
                    return "true";
                }
            }
            catch (Exception e)
            {
                NewMap.RollBackTransaction();
                return "false";
            }
        }

        public CarDetialInfo GetCarDetial(string TerNo)
        {
            CarDetialInfo cdi = new CarDetialInfo();
            TerminalInfo ti = (TerminalInfo)ExecuteQueryForObject("TerminalInfo.SelectTerminalInfoByTerNo", TerNo);
            if (ti != null && ti.CarId != null && ti.CarId != "")
            {
                CarInfo ci = (CarInfo)ExecuteQueryForObject("CarInfo.SelectCarByCarId", ti.CarId);
                cdi.CarInfoData = ci;
                RegistrationInfo reg = (RegistrationInfo)ExecuteQueryForObject("RegistrationInfo.SelectRegistrationInfo", ci.CarNo);
                if (reg != null)
                {
                    cdi.Register = reg;
                }
            }
            else 
            {
                CarInfo ci = new CarInfo();
                cdi.CarInfoData = ci;
                RegistrationInfo ri = new RegistrationInfo();
                cdi.Register=ri;  
            }

            if (ti != null && ti.CarId != null && ti.CarId != "")
            {
                IList<GetterpositionView> ici = ExecuteQueryForList<GetterpositionView>("TerminalInfo.SelectTerminalByCarId", ti.CarId);
                if (ici != null)
                {
                    cdi.terminalInfo = ici;
                }
            }
            if (TerNo != "")
            {
                IList<GetterpositionView> ici = ExecuteQueryForList<GetterpositionView>("TerminalInfo.SelectTerminalByTerNo", TerNo);
                if (ici != null)
                {
                    cdi.terminalInfo = ici;
                } 
            } 
            return cdi;
        }
    }
}
