// Generated by IBatisNetModel

using System;
using System.Data;
using GInterfaceDAL.Car;
using System.Collections.Generic;
using GModel.Car;
using System.Collections;
using IBatisNet.DataMapper;
using GModel.Basic;
using IBatisNet.DataMapper.MappedStatements;
using GModel;

namespace GDAL.Car
{
    public class CarReportDao : BaseSqlMapDao, ICarReportDao
    {
        public List<string> GetTableNames(Hashtable ht)
        {
            List<string> list = new List<string>();

            string ksrq = DateTime.Now.AddDays(-15).ToString("yyyy-MM-dd");
            string jsrq = DateTime.Now.ToString("yyyy-MM-dd");

            if (ht["KSRQ"] != null)
            {
                ksrq = ht["KSRQ"].ToString();
            }
            if (ht["JSRQ"] != null)
            {
                jsrq = ht["JSRQ"].ToString();
            }

            DateTime ks = Convert.ToDateTime(ksrq);
            DateTime js = Convert.ToDateTime(jsrq);

            ArrayList rqs = new ArrayList();

            while( ks <= js )
            {
                rqs.Add("ZTRACK" + ks.ToString("yyyyMMdd"));
                ks = ks.AddDays(1);
            }

            if(rqs.Count>0)
            {
                string tmp = "";
                foreach(string rq in rqs)
                {
                    tmp += ",'" + rq + "'";
                }
                if(tmp.Length>0)
                {
                    tmp = tmp.Substring(1);
                }

                string sql = @"
                    select t.TABLE_NAME
                        from user_tables t
                        where t.TABLE_NAME in (" + tmp + @") order by 1 ";

                System.Data.DataSet ds = this.QueryForDataSet("ColligateQuery.ProteanQuery", sql);

                if (ds != null
                    && ds.Tables.Count > 0
                    && ds.Tables[0].Rows.Count > 0)
                {
                    foreach (System.Data.DataRow dr in ds.Tables[0].Rows)
                    {
                        list.Add(dr["TABLE_NAME"].ToString());
                    }
                }
            }
            
            return list;
        }

        public List<string> GetTerNos(Hashtable ht)
        {
            string sql = GetTerNos_SQL(ht);

            System.Data.DataSet ds = this.QueryForDataSet("ColligateQuery.ProteanQuery", sql);

            List<string> list = new List<string>();
            
            if (ds != null
                && ds.Tables.Count > 0
                && ds.Tables[0].Rows.Count > 0)
            {
                foreach (System.Data.DataRow dr in ds.Tables[0].Rows)
                {
                    list.Add(dr["ter_no"].ToString());
                }
            }

            return list;
        }

        public string GetTerNos_SQL(Hashtable ht)
        {
            string DeptId = "";
            if (ht["DeptId"] != null)
            {
                DeptId = ht["DeptId"].ToString();
            }

            string ShowChild = "false";
            if (ht["ShowChild"] != null)
            {
                ShowChild = ht["ShowChild"].ToString();
            }

            string TerTypeNo = "";
            if (ht["TerTypeNo"] != null)
            {
                TerTypeNo = ht["TerTypeNo"].ToString();
            }

            string ObjTypeNo = "";
            if (ht["ObjTypeNo"] != null)
            {
                ObjTypeNo = ht["ObjTypeNo"].ToString();
            }
            string KeyText = "";
            if (ht["KeyText"] != null)
            {
                KeyText = ht["KeyText"].ToString();
            }
            string username = "";
            if (ht["UserLname"] != null)
            {
                username = ht["UserLname"].ToString();
            }

            //生成有效终端列表
            string sql = @"
                select t.ter_no
                  from products_info p, TERMINAL_INFO t
                 where p.pro_id = t.ter_typeid  ";

            if (username != "")
            {
                sql += "and t.ter_no in (select ter_no from SETMANAGER where username='" + username.Trim() + "')";
            }

            if (KeyText.Trim().Length > 0)
            {
                // == 1 TerNo 终端号
                if (ObjTypeNo == "1")
                {
                    sql += "and t.ter_no like '%" + KeyText.Trim() + "%'";
                }
                // == 2 CarNo 车牌号
                if (ObjTypeNo == "2")
                {
                    sql = @"
                        select t.ter_no
                            from products_info p, car_info c, TERMINAL_INFO t
                            where p.pro_id = t.ter_typeid
                            and t.car_id = c.car_id ";

                    sql += "and c.car_no like '%" + KeyText.Trim() + "%'";
                }
            }

            if (DeptId != "")
            {
                if (ShowChild == "true")
                {
                    sql += @" and t.dept_id in ( select d.businessdivisionid dept_id
                                                        from dept_info d 　　
                                                        start with d.businessdivisionid = '" + DeptId + @"'
                                                    connect by prior d.businessdivisionid = d.fatherid ) ";
                }
                else
                {
                    sql += " and t.dept_id = '" + DeptId + "' ";
                }
            }

            if (TerTypeNo != "")
            {
                sql += " and p.pro_id = '" + TerTypeNo + "' ";
            }

            return sql;
        }

        #region 超里程统计

        private double GetVis_UserConfig(string userDeptCode)
        {
            string sql = @"select f.deptid, f.name, f.deptcode, c.lcs, f.cc
                      from user_config c,
                           (select u.*
                              from (select s.businessdivisionid   deptid,
                                           s.businessdivisionname name,
                                           s.businessdivisioncode deptcode,
                                           -1                     cc
                                      from DEPT_INFO s
                                     where s.businessdivisioncode = '" + userDeptCode + @"'
                                    union
                                    select d.businessdivisionid   deptid,
                                           d.businessdivisionname name,
                                           d.businessdivisioncode deptcode,
                                           level                  cc
                                      from DEPT_INFO d
                                     start with d.businessdivisionid = '" + userDeptCode + @"'
                                    connect by nocycle prior d.fatherid = d.businessdivisionid) u
                             order by u.deptid) f
                     where f.deptcode = c.deptcode
                     order by f.cc";

            System.Data.DataSet ds_0 = this.QueryForDataSet("ColligateQuery.ProteanQuery", sql);

            double user_config_lc = 2000000;

            if (ds_0 != null
                && ds_0.Tables.Count > 0
                && ds_0.Tables[0].Rows.Count > 0)
            {
                user_config_lc = Convert.ToDouble(ds_0.Tables[0].Rows[0]["lcs"]);
            }

            return user_config_lc;
        }

        public bool GetVis_Carlist(string userDeptCode)
        {

            bool flag = false;

            #region 判断当前用户及其根节点是否存在超里程统计设置

            string sql = @" select f.deptid, f.name, f.deptcode, c.lcs, f.cc
                                  from user_config c,
                                       ( select u.*
                                          from (select s.businessdivisionid   deptid,
                                                       s.businessdivisionname name,
                                                       s.businessdivisioncode deptcode,
                                                       -1                     cc
                                                  from DEPT_INFO s
                                                 where s.businessdivisioncode = '" + userDeptCode + @"'
                                                union
                                                select d.businessdivisionid   deptid,
                                                       d.businessdivisionname name,
                                                       d.businessdivisioncode deptcode,
                                                       level                  cc
                                                  from DEPT_INFO d
                                                 start with d.businessdivisionid = '" + userDeptCode + @"'
                                                connect by nocycle prior d.fatherid = d.businessdivisionid) u
                                         order by u.deptid ) f
                                 where f.deptcode = c.deptcode
                                 order by f.cc ";

            System.Data.DataSet ds_9 = this.QueryForDataSet("ColligateQuery.ProteanQuery", sql);

            if (ds_9 == null || ds_9.Tables.Count == 0 || ds_9.Tables[0].Rows.Count == 0)
            {
                return false;
            }

            #endregion

            #region 判断当前用户下是否存在符合条件的记录

            sql = @"select t.ter_no,t.remainl_pct from REALTIME_DATA t
                 where t.depcode in
                       (select d.businessdivisioncode deptcode
                          from (select * from dept_info t where t.isdel = 0) d 　　
                         start with d.businessdivisionid =
                                    (select f.businessdivisionid
                                       from dept_info f
                                      where f.businessdivisioncode = '" + userDeptCode + @"')
                        connect by prior d.businessdivisionid = d.fatherid)
                   and t.settype = '101'";

            System.Data.DataSet ds = this.QueryForDataSet("ColligateQuery.ProteanQuery", sql);

            double user_config_lc = GetVis_UserConfig(userDeptCode);

            if (ds != null
                && ds.Tables.Count > 0
                && ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    if ((dr["REMAINL_PCT"] != DBNull.Value))
                    {
                        if(int.Parse(dr["REMAINL_PCT"].ToString(), System.Globalization.NumberStyles.HexNumber)
                            > user_config_lc)
                        {
                            flag = true;
                            break;
                        }
                    }
                }
            }

            #endregion

            return flag;
        }

        public DataTable GetVis_Carlist_dt(string userDeptCode)
        {
            string sql = @"select t.ter_no,
                        nvl((select max(c.car_no)
                                from car_info c, TERMINAL_INFO r
                            where c.car_id = r.car_id
                                and r.ter_no = t.ter_no),
                            '') car_no,
                        t.rtime,
                        t.remainl_pct,
                        t.position
                    from REALTIME_DATA t
                    where t.depcode in
                        (select d.businessdivisioncode deptcode
                            from (select * from dept_info t where t.isdel = 0) d 　　
                            start with d.businessdivisionid =
                                    (select f.businessdivisionid
                                        from dept_info f
                                        where f.businessdivisioncode = '" + userDeptCode + @"')
                        connect by prior d.businessdivisionid = d.fatherid)
                    and t.settype = '101' and t.remainl_pct!='0' and t.remainl_pct!='00000000'";

            System.Data.DataSet ds = this.QueryForDataSet("ColligateQuery.ProteanQuery", sql);

            DataTable dt = ds.Tables[0].Clone();

            try
            {
                if (ds != null
                    && ds.Tables.Count > 0
                    && ds.Tables[0].Rows.Count > 0)
                {
                    double user_config_lc = GetVis_UserConfig(userDeptCode);

                    foreach (DataRow dr in ds.Tables[0].Rows)
                    {
                        if ((dr["REMAINL_PCT"] != DBNull.Value))
                        {
                            if (int.Parse(dr["REMAINL_PCT"].ToString(), System.Globalization.NumberStyles.HexNumber)
                                > user_config_lc)
                            {
                                dt.ImportRow(dr);
                            }
                        }
                    }
                }
            }
            catch (Exception e)
            {
                string s = e.Message;
            }
            finally
            {
                
            }

            return dt; 
        }


        public DataTable GetVis_Carlist_dt2(string userDeptCode)
        {
            string sql = @"select t.ter_no,
                        nvl((select max(c.car_no)
                                from car_info c, TERMINAL_INFO r
                            where c.car_id = r.car_id
                                and r.ter_no = t.ter_no),
                            '') car_no,
                        t.rtime,
                        t.workstate,
                        t.remainl_pct,
                        t.position
                    from REALTIME_DATA t
                    where t.depcode in
                        (select d.businessdivisioncode deptcode
                            from (select * from dept_info t where t.isdel = 0) d 　　
                            start with d.businessdivisionid =
                                    (select f.businessdivisionid
                                        from dept_info f
                                        where f.businessdivisioncode = '" + userDeptCode + @"')
                        connect by prior d.businessdivisionid = d.fatherid)
                    and t.settype = '101' and t.remainl_pct!='0' and t.remainl_pct!='00000000'";

            System.Data.DataSet ds = this.QueryForDataSet("ColligateQuery.ProteanQuery", sql);

            DataTable dt = ds.Tables[0].Clone();

            try
            {
                if (ds != null
                    && ds.Tables.Count > 0
                    && ds.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow dr in ds.Tables[0].Rows)
                    {
                        if (dr["REMAINL_PCT"] != DBNull.Value && dr["WORKSTATE"] != DBNull.Value)
                        {
                            double pctnum = int.Parse(dr["REMAINL_PCT"].ToString(), System.Globalization.NumberStyles.HexNumber);
                            double pctline = double.Parse(dr["WORKSTATE"].ToString()) * 1000;
                            if (pctnum > pctline)
                            {
                                dt.ImportRow(dr);
                            }
                        }
                    }
                }
            }
            catch (Exception e)
            {
                string s = e.Message;
            }
            finally
            {

            }

            return dt;
        }
        #endregion

        /// <summary>
        /// 里程统计
        /// </summary>
        /// <param name="ht"></param>
        /// <returns></returns>
        public System.Data.DataTable GetCarReport_LCTJViewPage(Hashtable ht)
        {
            List<string> TerNos = GetTerNos(ht);
            string Tns = "";
            if(TerNos.Count>0)
            {
                Tns = GetTerNos_SQL(ht);
            }
            else
            {
                return null;
            }

            List<string> TableNames = GetTableNames(ht);
            string Tables = "";
            if (TableNames.Count > 0)
            {
                foreach (string t in TableNames)
                {
                    Tables += @"union  select k.ter_no, k.rtime, k.position, k.remainl_pct
                                        from " + t + @" k
                                        where k.ter_no in (" + Tns + @") ";
                }
                Tables = Tables.Substring(6);
            }
            else
            {
                return null;
            }

            string sql = @"  
                with TmpTable as ( "+ Tables + @" )
                select  o.ter_no, 
                        nvl((select c.car_no
                             from car_info c, TERMINAL_INFO t
                            where c.car_id = t.car_id
                              and t.ter_no = o.ter_no),
                           '') car_no,
                        nvl((select t.ter_typeid
                             from TERMINAL_INFO t
                            where t.ter_no = o.ter_no),'') ter_typeid,
                        o.rtime, 
                        o.position,
                        o.remainl_pct
                    from TmpTable o
                        where (o.ter_no, o.rtime) in
                            (select w.ter_no, max(w.rtime) d
                                from TmpTable w
                                group by w.ter_no
                            union
                            select w.ter_no, min(w.rtime) x from TmpTable w group by w.ter_no)
                    order by 1,4";

            System.Data.DataSet ds = this.QueryForDataSet("ColligateQuery.ProteanQuery", sql);

            if (ds != null
                && ds.Tables.Count > 0
                && ds.Tables[0].Rows.Count > 0)
            {
                return ds.Tables[0];
            }
            else
            {
                return null;
            }
        }

        #region 报警统计

        /// <summary>
        /// 报警统计SQL
        /// </summary>
        /// <param name="ht"></param>
        /// <param name="terNos"></param>
        /// <returns></returns>
        private string GetBJTJSql(Hashtable ht,string terNos)
        {
            string WarningType = "qb";

            if (ht["WarningType"] != null)
            {
                WarningType = ht["WarningType"].ToString();
            }

            WarningType warningType  =  (WarningType)Enum.Parse( typeof (WarningType), WarningType,  true );

            GetWarningTypeSQLManager mg = new GetWarningTypeSQLManager(warningType);

            return mg.GetWarningTypeSQL(terNos);
            
        }

        private string GetBJTJSql_Count(Hashtable ht, string terNos)
        {
            string WarningType = "qb";

            if (ht["WarningType"] != null)
            {
                WarningType = ht["WarningType"].ToString();
            }

            string sql = @"
                select count(*)
                    from REALTIME_DATA k
                where k.ter_no in (" + terNos + @") 
                and ((k.ter_status is not null and k.TER_STATUS = '4') or ((k.settype='102' or k.settype='104') and k.postbacktimes is not null and k.postbacktimes > 1000)
                or (k.REPLYDATACODE in ('301','02030B','020307') and k.REPLYDATACODE is not null )) ";

            switch (WarningType.Trim().ToLower())
            {
                case "ddbj":

                    #region

                    sql = @"
                        select count(*)
                            from REALTIME_DATA k
                            where k.ter_no in (" + terNos + @") 
                            and k.REPLYDATACODE = '020307'
                            and k.REPLYDATACODE is not null 
                        ";
                    #endregion

                    break;

                case "ccbj":

                    #region

                    sql = @"
                        select count(*)
                            from REALTIME_DATA k
                            where k.ter_no in (" + terNos + @") 
                            and k.ter_status is not null
                            and k.TER_STATUS = '4' 
                    ";

                    #endregion

                    break;

                case "qybj":

                    #region

                    sql = @"
                        select count(*)
                            from REALTIME_DATA k
                            where k.REPLYDATACODE is not null
                            and k.ter_no in (" + terNos + @")
                            and k.REPLYDATACODE = '301'
                    
                    ";

                    #endregion

                    break;

                case "csbj":

                    #region

                    sql = @"
                        select count(*)
                            from REALTIME_DATA k
                            where k.REPLYDATACODE is not null
                            and k.ter_no in (" + terNos + @")
                            and k.REPLYDATACODE = '02030B' 
                    ";

                    #endregion

                    break;

                case "ddyj":
                    #region
                    sql = @"
                        select count(*)
                            from REALTIME_DATA k
                            where k.ter_no in (" + terNos + @") 
                            and (k.settype='102' or k.settype='104')
                            and k.postbacktimes is not null
                            and k.postbacktimes > 1000 
                    ";
                    #endregion
                    break;

                case "ysdl":
                    #region
                    sql = @"
                        select count(*)
                            from DOUBTALARM da
                            where da.ter_no in (" + terNos + @") 
                            and da.DOUBTTYPE is not null
                            and da.DOUBTTYPE = '2' 
                    ";
                    #endregion
                    break;

                case "yscc":
                    #region
                    sql = @"
                        select count(*)
                            from DOUBTALARM da
                            where da.ter_no in (" + terNos + @") 
                            and da.DOUBTTYPE is not null
                            and da.DOUBTTYPE = '1' 
                    ";
                    #endregion
                    break;
            }

            return sql;
        }

        /// <summary>
        /// 报警统计
        /// </summary>
        /// <param name="ht"></param>
        /// <returns></returns>
        public System.Data.DataTable GetCarReport_BJTJViewPage(Hashtable ht)
        {
            List<string> TerNos = GetTerNos(ht);
            string Tns = "";
            if (TerNos.Count > 0)
            {
                Tns = GetTerNos_SQL(ht);
            }
            else
            {
                return null;
            }

            string sql = GetBJTJSql(ht, Tns);

            try
            {
                System.Data.DataSet ds = this.QueryForDataSet("ColligateQuery.ProteanQuery", sql);

                if (ds != null
                    && ds.Tables.Count > 0
                    && ds.Tables[0].Rows.Count > 0)
                {
                    return ds.Tables[0];
                }
                else
                {
                    return null;
                }
            }
            catch(Exception ex)
            {
                return null;
            }
        }
        public System.Data.DataTable GetCarReport_BJTJViewPage_FY(Hashtable ht)
        {
            string Tns = GetTerNos_SQL(ht);

            string sql = GetBJTJSql(ht, Tns);

            sql = GetSQL_FY(ht, sql);

            try
            {
                System.Data.DataSet ds = this.QueryForDataSet("ColligateQuery.ProteanQuery", sql);

                if (ds != null
                    && ds.Tables.Count > 0
                    && ds.Tables[0].Rows.Count > 0)
                {
                    return ds.Tables[0];
                }
                else
                {
                    return null;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public int GetCarReport_BJTJViewPage_Count(Hashtable ht)
        {
            string Tns = GetTerNos_SQL(ht);

            string sql = this.GetBJTJSql_Count(ht, Tns);

            try
            {
                System.Data.DataSet ds = this.QueryForDataSet("ColligateQuery.ProteanQuery", sql);

                if (ds != null
                    && ds.Tables.Count > 0
                    && ds.Tables[0].Rows.Count > 0)
                {
                    return Convert.ToInt32(ds.Tables[0].Rows[0][0]);
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                return 0;
            }
        }

        #endregion

        #region 终端统计

        /// <summary>
        /// 终端统计SQL
        /// </summary>
        /// <param name="ht"></param>
        /// <param name="terNos"></param>
        /// <returns></returns>
        private string GetZDTJSql(Hashtable ht, string terNos)
        {
            string TerType = "yxzd";

            if (ht["TerType"] != null)
            {
                TerType = ht["TerType"].ToString();
            }

            string sql = "";

            switch (TerType.Trim().ToLower())
            {
                case "yxzd":  //有线
                    
                    #region

                    sql = @"
                        SELECT T.TER_NO,
                               NVL((SELECT C.CAR_NO
                                     FROM TERMINAL_INFO F, CAR_INFO C
                                    WHERE C.CAR_ID = F.CAR_ID
                                      AND F.TER_NO = T.TER_NO),
                                   '') CAR_NO,

                               T.RTIME HCSJ ,                 --回传时间,
                               T.REMAINL_PCT ZLC ,            --总里程,
                               ROUND(SYSDATE - T.RTIME) LXTS, --离线天数,
                               T.TER_STATUS DQBJZT,           --当前报警状态,

                               '' MS_BZBL , --标准比例,
                               '' MS_JZBL , --精准比例,
                               '' MS_ZCBL , --追车比例,

                               T.POSTBACKTIMES HCCS ,         --回传次数,
                               T.TOTALWORKTIME LJGS ,         --累计工时,
                               T.RTIME TJSJ                   --统计时间

                          FROM REALTIME_DATA T, TERMINAL_INFO F, TERTYPE_YX P
                         WHERE T.TER_NO = F.TER_NO
                           AND P.PRO_ID = F.TER_TYPEID
                           AND F.TER_NO IN (" + terNos + @")
                           ORDER BY TER_NO , LXTS

                    ";

                    #endregion

                    break;

                case "wxzd":  //无线
                    
                    #region

                    sql = @"
                        SELECT T.TERNO TER_NO ,
                               NVL((SELECT C.CAR_NO
                                     FROM TERMINAL_INFO F, CAR_INFO C
                                    WHERE C.CAR_ID = F.CAR_ID
                                      AND F.TER_NO = T.TERNO),
                                   '') CAR_NO,

                               T.NEWRTIME HCSJ ,        --回传时间,
                               null ZLC ,                 --总里程,
                               T.NOTRTIMEDAY LXTS ,     --离线天数,
                               T.CURALARMSTATE DQBJZT , --当前报警状态,

                               T.STANDARDSCALE MS_BZBL ,--标准比例,
                               T.PRECISESCALE MS_JZBL , --精准比例,
                               T.CHASECARSCALE MS_ZCBL ,--追车比例,

                               T.POSTBACKTIMES HCCS ,   --回传次数,
                               T.TOTALWORKTIME LJGS,    --累计工时,
                               T.CENSUSTIME TJSJ        --统计时间

                          FROM TERCENSUS T
                         WHERE T.TERNO IN (" + terNos + @")
                         ORDER BY 1
                    ";

                    #endregion

                    break;
            }

            return sql;
        }
        /// <summary>
        /// 终端统计SQL_Count
        /// </summary>
        /// <param name="ht"></param>
        /// <param name="terNos"></param>
        /// <returns></returns>
        private string GetZDTJSql_Count(Hashtable ht, string terNos)
        {
            string TerType = "yxzd";

            if (ht["TerType"] != null)
            {
                TerType = ht["TerType"].ToString();
            }

            string sql = "";

            switch (TerType.Trim().ToLower())
            {
                case "yxzd":  //有线

                    #region

                    sql = @"
                        SELECT count(*)

                          FROM REALTIME_DATA T, TERMINAL_INFO F, TERTYPE_YX P
                         WHERE T.TER_NO = F.TER_NO
                           AND P.PRO_ID = F.TER_TYPEID
                           AND F.TER_NO IN (" + terNos + @")
                           
                    ";

                    #endregion

                    break;

                case "wxzd":  //无线

                    #region

                    sql = @"
                        SELECT count(*)

                          FROM TERCENSUS T
                         WHERE T.TERNO IN (" + terNos + @")
                         
                    ";

                    #endregion

                    break;
            }

            return sql;
        }

        /// <summary>
        /// 终端统计-导出excel
        /// </summary>
        /// <param name="ht"></param>
        /// <returns></returns>
        public System.Data.DataTable GetCarReport_ZDTJViewPage(Hashtable ht)
        {
            List<string> TerNos = GetTerNos(ht);
            string Tns = "";
            if (TerNos.Count > 0)
            {
                Tns = GetTerNos_SQL(ht);
            }
            else
            {
                return null;
            }

            string sql = GetZDTJSql(ht, Tns);

            try
            {
                System.Data.DataSet ds = this.QueryForDataSet("ColligateQuery.ProteanQuery", sql);

                if (ds != null
                    && ds.Tables.Count > 0
                    && ds.Tables[0].Rows.Count > 0)
                {
                    return ds.Tables[0];
                }
                else
                {
                    return null;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        /// <summary>
        /// 终端统计-分页
        /// </summary>
        /// <param name="ht"></param>
        /// <returns></returns>
        public System.Data.DataTable GetCarReport_ZDTJViewPage_FY(Hashtable ht)
        {

            string Tns = GetTerNos_SQL(ht);

            string sql = GetZDTJSql(ht, Tns);

            //识别分页
            //*********************************************************************
            sql = GetSQL_FY(ht, sql);
            //*********************************************************************

            try
            {
                System.Data.DataSet ds = this.QueryForDataSet("ColligateQuery.ProteanQuery", sql);

                if (ds != null
                    && ds.Tables.Count > 0
                    && ds.Tables[0].Rows.Count > 0)
                {
                    return ds.Tables[0];
                }
                else
                {
                    return null;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        /// <summary>
        /// 终端统计-统计总数
        /// </summary>
        /// <param name="ht"></param>
        /// <returns></returns>
        public int GetCarReport_ZDTJViewPage_Count(Hashtable ht)
        {
            string Tns = GetTerNos_SQL(ht);

            string sql = GetZDTJSql_Count(ht, Tns);

            try
            {
                System.Data.DataSet ds = this.QueryForDataSet("ColligateQuery.ProteanQuery", sql);

                if (ds != null
                    && ds.Tables.Count > 0
                    && ds.Tables[0].Rows.Count > 0)
                {
                    return Convert.ToInt32(ds.Tables[0].Rows[0][0]);
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                return 0;
            }
        }

        #endregion

        public List<TreeMode> GetReportMenuTree()
        {
            List<TreeMode> list = new List<TreeMode>();

            string sql = @" select t.id, t.pid, t.name, t.url, t.icon, t.cc from RPTMENU_TREE t ";

            System.Data.DataSet ds = this.QueryForDataSet("ColligateQuery.ProteanQuery", sql);

            if (ds != null
                && ds.Tables.Count > 0
                && ds.Tables[0].Rows.Count > 0)
            {
                foreach (System.Data.DataRow dr in ds.Tables[0].Rows)
                {
                    if(dr["cc"].ToString()=="1")
                    {
                        list.Add(CreateTreeNode(ds.Tables[0], dr));
                    }
                }
            }

            return list;
        }

        private TreeMode CreateTreeNode(System.Data.DataTable dt,System.Data.DataRow dr)
        {
            TreeMode p_node = new TreeMode("");

            p_node.id = dr["id"].ToString();
            p_node.text = dr["name"].ToString();
            p_node.icon = dr["icon"].ToString();
            p_node.url=dr["url"].ToString();
            if(dt!=null && dt.Rows.Count>0)
            {
                foreach(System.Data.DataRow r in dt.Rows)
                {
                    if(r["pid"].ToString()==dr["id"].ToString())
                    {
                        TreeMode _p_node = new TreeMode("");

                        _p_node.id = r["id"].ToString();
                        _p_node.text = r["name"].ToString();
                        _p_node.icon = r["icon"].ToString();
                        _p_node.url = r["url"].ToString();

                        if (p_node.children == null)
                            p_node.children = new List<TreeMode>();

                        p_node.children.Add(_p_node);
                    }
                }
            }

            return p_node;
        }

        public IList<CarReport_ZXTJView> GetZxtjViewPage(object o)
        {
            return ExecuteQueryForList<CarReport_ZXTJView>("CarReportData.GetZxtjViewPage", o);
        }

        public int GetZxtjViewCount(object o)
        {
            object count = ExecuteQueryForObject("CarReportData.GetZxtjViewCount", o);
            return (int)count;
        }

        public IList<CarReport_LXTJView> GetLxtjViewPage(object o)
        {
            return ExecuteQueryForList<CarReport_LXTJView>("CarReportData.GetLxtjViewPage", o);
        }

        public int GetLxtjViewCount(object o)
        {
            object count = ExecuteQueryForObject("CarReportData.GetLxtjViewCount", o);
            return (int)count;
        }

        public IList<CarReport_LCBBView> GetLcbbData(object o)
        {
            return ExecuteQueryForList<CarReport_LCBBView>("CarReportData.GetLcbbData", o);
        }

        public IList<CarReport_LCBBView> GetLcbbTodayData(object o)
        {
            return ExecuteQueryForList<CarReport_LCBBView>("CarReportData.GetLcbbTodayData", o);
        }

        public IList<CarReport_TerData> GetTjbbTerData(Hashtable ht)
        {
            return ExecuteQueryForList<CarReport_TerData>("CarReportData.GetTjbbTerData", ht);
        }

        public int GetTjbbTerDataCount(Hashtable ht)
        {
            object count = ExecuteQueryForObject("CarReportData.GetTjbbTerDataCount", ht);
            return (int)count;
        }

        /// <summary>
        /// 添加分页 
        /// </summary>
        /// <param name="ht"></param>
        /// <param name="sql"></param>
        /// <returns></returns>
        private string GetSQL_FY(Hashtable ht, string sql)
        {
            //识别分页
            //*********************************************************************
            int StartData = 0;
            int EndData = 15;

            if (ht["StartData"] != null
                && ht["StartData"].ToString().Trim().Length > 0)
            {
                StartData = Convert.ToInt32(ht["StartData"]);
            }
            if (ht["EndData"] != null
                && ht["EndData"].ToString().Trim().Length > 0)
            {
                EndData = Convert.ToInt32(ht["EndData"]);
            }

            sql = @" select p.*
                       from (select w.*, rownum rn from (" + sql + @") w) p
                      where p.rn >= " + StartData + @"
                        and p.rn < " + EndData + @" ";

            //*********************************************************************

            return sql;
        }
    }
    
    #region WarningTypeSQL

    public enum WarningType
    {
        qb,
        ddbj,
        ccbj,
        qybj,
        csbj,
        ddyj,
        ysdl,
        yscc
    }

    public class GetWarningTypeSQLManager
    {
        public delegate string GetWarningTypeSQLDelegate(string terNos);

        public event GetWarningTypeSQLDelegate GetSqlDelegate;

        private Dictionary<WarningType, IWarningTypeSQL> dic_lsit { get; set; }

        public GetWarningTypeSQLManager(WarningType argsEnumWarningType)
        {
            dic_lsit = new Dictionary<WarningType, IWarningTypeSQL> { 
                { WarningType.qb , new WTypeSQL_qb()},
                { WarningType.ddbj , new WTypeSQL_ddbj()},
                { WarningType.ccbj , new WTypeSQL_ccbj()},
                { WarningType.csbj , new WTypeSQL_csbj()},
                { WarningType.qybj , new WTypeSQL_qybj()},
                { WarningType.ddyj , new WTypeSQL_ddyj()},
                { WarningType.ysdl , new WTypeSQL_ysdl()},
                { WarningType.yscc , new WTypeSQL_yscc()}
            };

            this.GetSqlDelegate += dic_lsit[argsEnumWarningType].GetSQL;

        }

        public string GetWarningTypeSQL(string terNos)
        {
            string sql = "";

            if (this.GetSqlDelegate != null)
            {
                sql = this.GetSqlDelegate(terNos);
            }

            return sql;
        }
    }

    public interface IWarningTypeSQL
    {
        string GetSQL(string terNos);
    }

    public abstract class WarningTypeSQL
    {
        protected static string tmp_sql = @"
            select k.ter_no,
                    nvl((select c.car_no
                            from car_info c, terminal_info i
                        where c.car_id = i.car_id
                            and i.ter_no = k.ter_no),
                        '') car_no,nvl((select c.PRO_ID
                            from terminal_info i, PRODUCTS_INFO c
                        where c.pro_id = i.TER_TYPEID and i.ter_no = k.ter_no ),
                        '') ter_typeid,  
                    k.rtime,k.position,k.postbacktimes,
            case k.ter_status when '1' then '测试' when '2' then '待激活' when '3' then '已激活' when '4' then '已拆除' else '其他' end AS ter_status, 
                nvl(k.REPLYDATANAME,'正常') as replydataname,
                round((sysdate - to_date(k.rtime))) lx
                from REALTIME_DATA k left join DOUBTALARM da on k.ter_no=da.ter_no
                where k.ter_no in ({0}) {1} 
                order by 3 desc
        ";
    }


    public class WTypeSQL_ddbj : WarningTypeSQL, IWarningTypeSQL
    {
        public string GetSQL(string terNos)
        {
            string cxtj = @" and k.REPLYDATACODE = '020307'
                           and k.REPLYDATACODE is not null  ";

            return string.Format(tmp_sql, terNos, cxtj);
        }
    }

    public class WTypeSQL_csbj : WarningTypeSQL, IWarningTypeSQL
    {
        public string GetSQL(string terNos)
        {
            string cxtj = @" and k.REPLYDATACODE is not null
                            and k.REPLYDATACODE = '02030B'  ";

            return string.Format(tmp_sql, terNos, cxtj);
        }
    }

    public class WTypeSQL_qybj : WarningTypeSQL, IWarningTypeSQL
    {
        public string GetSQL(string terNos)
        {
            string cxtj = @" and k.REPLYDATACODE is not null
                            and k.REPLYDATACODE = '301'  ";

            return string.Format(tmp_sql, terNos, cxtj);
        }
    }

    public class WTypeSQL_ddyj : WarningTypeSQL, IWarningTypeSQL
    {
        public string GetSQL(string terNos)
        {
            string cxtj = @" and (k.settype='102' or k.settype='104') and k.postbacktimes is not null and k.postbacktimes>1000 ";

            return string.Format(tmp_sql, terNos, cxtj);
        }
    }

    public class WTypeSQL_ccbj : WarningTypeSQL, IWarningTypeSQL
    {
        public string GetSQL(string terNos)
        {
            string cxtj = @" and k.ter_status is not null
                            and k.TER_STATUS = '4' ";

            return string.Format(tmp_sql, terNos, cxtj);
        }
    }

    public class WTypeSQL_ysdl : WarningTypeSQL, IWarningTypeSQL
    {
        public string GetSQL(string terNos)
        {
            string cxtj = @" and da.DOUBTTYPE is not null
                            and da.DOUBTTYPE = '2' ";

            return string.Format(tmp_sql, terNos, cxtj);
        }
    }

    public class WTypeSQL_yscc : WarningTypeSQL, IWarningTypeSQL
    {
        public string GetSQL(string terNos)
        {
            string cxtj = @" and da.DOUBTTYPE is not null
                            and da.DOUBTTYPE = '1' ";

            return string.Format(tmp_sql, terNos, cxtj);
        }
    }

    public class WTypeSQL_qb : WarningTypeSQL, IWarningTypeSQL
    {
        public string GetSQL(string terNos)
        {
            string cxtj = @" and ((k.ter_status is not null and k.TER_STATUS = '4') or ((k.settype='102' or k.settype='104') and k.postbacktimes is not null and k.postbacktimes>1000)
                             or (k.REPLYDATACODE in ('301','02030B','020307') and k.REPLYDATACODE is not null ))";

            return string.Format(tmp_sql, terNos, cxtj);
        }
    }

    public class WTypeSQL_Manager : IWarningTypeSQL
    {
        private IWarningTypeSQL iwsql = null;

        public WTypeSQL_Manager(IWarningTypeSQL obj)
        {
            iwsql = obj;
        }

        public string GetSQL(string terNos)
        {
            return this.iwsql.GetSQL(terNos);
        }
    }

    #endregion
}
