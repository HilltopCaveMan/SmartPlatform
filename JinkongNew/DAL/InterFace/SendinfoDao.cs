// Generated by IBatisNetModel

using System;

using GInterfaceDAL.InterFace;
using System.Collections.Generic;
using GModel.InterFace;
using IBatisNet.DataMapper;

namespace GDAL.InterFace
{
    public class SendinfoDao : BaseSqlMapDao, ISendinfoDao
    {
		 public object Insert(Sendinfo entity)
        {
            return ExecuteInsert("Sendinfo.InsertSendinfo", entity);
        }

        public int Update(Sendinfo entity)
        {
            return ExecuteUpdate("Sendinfo.UpdateSendinfo", entity);
        }

		public int Delete(object condition)
        {
            //删除跟插入调同一个方法。
            return ExecuteUpdate("Sendinfo.DeleteSendinfo", condition);
        }

        public Sendinfo GetSendinfo(string Id)
        {
            return (Sendinfo)ExecuteQueryForObject("Sendinfo.SelectSendinfo",Id);
        }

        public IList<Sendinfo> GetSendinfoPage(object o) 
        {
            return ExecuteQueryForList<Sendinfo>("Sendinfo.SelectSendinfoPage", o);
        }


        public IList<Sendinfo> SelectSendinfoListByTerNo(object o) 
        {
            return ExecuteQueryForList<Sendinfo>("Sendinfo.SelectSendinfoListByTerNo", o);
        }

        public IList<Sendinfo> SelectSendinfoListByTerNos(object o)
        {
            return ExecuteQueryForList<Sendinfo>("Sendinfo.SelectSendinfoListByTerNos", o);
        }


        public IList<Sendinfo> SelectSendinfoListNeweastByTerNos(object o)
        {
            return ExecuteQueryForList<Sendinfo>("Sendinfo.SelectSendinfoListNeweastByTerNos", o);
        }


        public int GetSendinfoCountByTerNo(object o)
        {
            object count = ExecuteQueryForObject("Sendinfo.SelectSendinfoCountByTerNo", o);
            return (int)count;
        }

        public int GetSendinfoCountByTerNos(object o)
        {
            object count = ExecuteQueryForObject("Sendinfo.SelectSendinfoCountByTerNos", o);
            return (int)count;
        }

		public int GetSendinfoCount(object o) 
        {
            object count = ExecuteQueryForObject("Sendinfo.SelectSendinfoCount", o);
            return (int)count;
        }

        public int GetSendinfoNeweastCountByTerNos(object o) 
        {
            object count = ExecuteQueryForObject("Sendinfo.SelectSendinfoNeweastCountByTerNos", o);
            return (int)count;
        }

        public string UpdateSendInfoTable(Sendinfo si)
        {
            try
            {
                ExecuteUpdate("Sendinfo.UpdateSendinfoTable", si);
                return "true";
            }
            catch (Exception e)
            {           
                return "false";
            }
        }

        public string UpdateSendInfoTable_Devid(string devid, string UpdatePara, string cmdResult) 
        {
            try
            { 
                Sendinfo si = new Sendinfo();
                si.DeviceId = devid;
                si.SendinfoCommand = cmdResult;
                Sendinfo sinew = (Sendinfo)ExecuteQueryForObject("Sendinfo.SelectSendInfoTable_Devid", si);
                if (sinew != null)
                {
                    Sendinfo sis = new Sendinfo();
                    sis.SendinfoStatus = Convert.ToDouble(UpdatePara);
                    sis.Resultstr = cmdResult;
                    sis.Id = sinew.Id;
                    ExecuteUpdate("Sendinfo.UpdateSendInfoTable_Devid", sis);
                    return "true";
                }
                else 
                {
                    return "false";
                }
            }
            catch (Exception e)
            {
                return "false";
            }
        }

        public IList<Sendinfo> GetSendinfoPageByDeviceId(string DeviceId) 
        {
            return ExecuteQueryForList<Sendinfo>("Sendinfo.SelectSendinfoPageByDeviceId", DeviceId);
        }

        public string InsertData(Sendinfo entity)
        {
            ISqlMapper NewMap = SqlMapper.Instance();
            try
            {
                NewMap.BeginTransaction();
                int reCount = ExecuteUpdateTrans("Sendinfo.UpdateSendInfoStatus6", entity,NewMap);
            
                ExecuteInsertTrans("Sendinfo.InsertSendinfo", entity, NewMap);

                Sendinfo si = (Sendinfo)ExecuteQueryForObjectTrans("Sendinfo.SelectSendinfoStatus1", entity.DeviceId, NewMap);
                //Sendinfo s = (Sendinfo)ExecuteQueryForObjectTrans("Sendinfo.SelectSendinfoStatus1", entity.DeviceId, NewMap);
                if (si != null)
                {

                    //删除SendinfoLast中所有时间大于5的状态=2的此设备的数据，
                    ExecuteUpdateTrans("SendinfoLast.DeleteSendinfoLastStu2T5", entity.DeviceId,NewMap);

                    SendinfoLast sfl = new SendinfoLast();
                    sfl.SendinfoId = si.Id;
                    sfl.DeviceId = entity.DeviceId;
                    sfl.CarinfoSim = entity.CarinfoSim;
                    sfl.SendinfoCommand = entity.SendinfoCommand;
                    sfl.SendinfoPtime = entity.SendinfoPtime;
                    sfl.SendinfoStatus = entity.SendinfoStatus;
                    sfl.SendinfoUserid = entity.SendinfoUserid;
                    sfl.SendinfoDescription = entity.SendinfoDescription;
                    sfl.ReceiptFlag = entity.ReceiptFlag;
                    sfl.ReceiptTime = entity.ReceiptTime;
                    sfl.ReceiptSuccflag = entity.ReceiptSuccflag;
                    sfl.Wanguan = entity.Wanguan;
                    sfl.Sendmethod = entity.Sendmethod;
                    sfl.Resultstr = entity.Resultstr;
                    sfl.Formvalue = entity.Formvalue;
                    sfl.Isonline = entity.Isonline;
                    sfl.Sendtotime = entity.Sendtotime;
                    sfl.Sendtocmd = entity.Sendtocmd;
                    sfl.Setcount = entity.Setcount;
                    sfl.Type = entity.Type;
                    sfl.Comandtype = entity.Comandtype;
                    
                    int count = ExecuteUpdateTrans("SendinfoLast.UpdateSendinfoLastAll", sfl, NewMap);
                    if (count == 0)
                    {
                        ExecuteInsertTrans("SendinfoLast.InsertSendinfoLast", sfl, NewMap);
                    }
                    NewMap.CommitTransaction();
                    return "true";
                }
                else 
                {
                    NewMap.RollBackTransaction();
                    return "数据出错！";
                }               
            }
            catch (Exception e)
            {
                NewMap.RollBackTransaction();
                return entity.DeviceId;
            }
        }

        public string InsertDataNew(Sendinfo entity,int oldid)
        {
            ISqlMapper NewMap = SqlMapper.Instance();
            try
            {
                NewMap.BeginTransaction();
                int reCount = ExecuteUpdateTrans("Sendinfo.UpdateSendInfoStatus6", entity, NewMap);

                ExecuteInsertTrans("Sendinfo.InsertSendinfo", entity, NewMap);

                Sendinfo si = (Sendinfo)ExecuteQueryForObjectTrans("Sendinfo.SelectSendinfoStatus1", entity.DeviceId, NewMap);
                //Sendinfo s = (Sendinfo)ExecuteQueryForObjectTrans("Sendinfo.SelectSendinfoStatus1", entity.DeviceId, NewMap);
                if (si != null)
                {

                    //删除SendinfoLast中所有时间大于5的状态=2的此设备的数据，
                    ExecuteUpdateTrans("SendinfoLast.DeleteSendinfoLastStu2T5", entity.DeviceId, NewMap);

                    SendinfoLast sfl = new SendinfoLast();
                    sfl.SendinfoId = si.Id;
                    sfl.DeviceId = entity.DeviceId;
                    sfl.CarinfoSim = entity.CarinfoSim;
                    sfl.SendinfoCommand = entity.SendinfoCommand;
                    sfl.SendinfoPtime = entity.SendinfoPtime;
                    sfl.SendinfoStatus = entity.SendinfoStatus;
                    sfl.SendinfoUserid = entity.SendinfoUserid;
                    sfl.SendinfoDescription = entity.SendinfoDescription;
                    sfl.ReceiptFlag = entity.ReceiptFlag;
                    sfl.ReceiptTime = entity.ReceiptTime;
                    sfl.ReceiptSuccflag = entity.ReceiptSuccflag;
                    sfl.Wanguan = entity.Wanguan;
                    sfl.Sendmethod = entity.Sendmethod;
                    sfl.Resultstr = entity.Resultstr;
                    sfl.Formvalue = entity.Formvalue;
                    sfl.Isonline = entity.Isonline;
                    sfl.Sendtotime = entity.Sendtotime;
                    sfl.Sendtocmd = entity.Sendtocmd;
                    sfl.Setcount = entity.Setcount;
                    sfl.Type = entity.Type;
                    sfl.Comandtype = entity.Comandtype;
                    sfl.SendGuid = entity.SendGuid;
                    sfl.OldId = oldid;
                    int count = ExecuteUpdateTrans("SendinfoLast.UpdateSendinfoLastAll", sfl, NewMap);
                    if (count == 0)
                    {
                        ExecuteInsertTrans("SendinfoLast.InsertSendinfoLastNew", sfl, NewMap);
                    }
                    NewMap.CommitTransaction();
                    return "true";
                }
                else
                {
                    NewMap.RollBackTransaction();
                    return "数据出错！";
                }
            }
            catch (Exception e)
            {
                NewMap.RollBackTransaction();
                return entity.DeviceId;
            }
        }

        public IList<Sendinfo> GetNewestSendinfo(string DeviceIds) 
        {
            return ExecuteQueryForList<Sendinfo>("Sendinfo.SelectSendinfoPageNewest", DeviceIds);
        }
    }
}
	