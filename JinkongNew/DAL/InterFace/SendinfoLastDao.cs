// Generated by IBatisNetModel

using System;

using GInterfaceDAL.InterFace;
using System.Collections.Generic;
using GModel.InterFace;
using IBatisNet.DataMapper;

namespace GDAL.InterFace
{
    public class SendinfoLastDao : BaseSqlMapDao, ISendinfoLastDao
    {
        public object Insert(SendinfoLast entity)
        {
            return ExecuteInsert("SendinfoLast.InsertSendinfoLast", entity);
        }

        public int Delete(object condition)
        {
            //删除跟插入调同一个方法。
            return ExecuteUpdate("SendinfoLast.DeleteSendinfoLast", condition);
        }

        public SendinfoLast GetSendinfoLast(SendinfoLast sendinfoLast)
        {
            return (SendinfoLast)ExecuteQueryForObject("SendinfoLast.SelectSendinfoLast",sendinfoLast);
        }

        public SendinfoLast GetSendinfoLastByOldId(string oldid) 
        {
            return (SendinfoLast)ExecuteQueryForObject("SendinfoLast.SelectSendinfoLastByOldId", oldid);
        }

        //public IList<SendinfoLast> GetSendinfoLastList(object o)
        //{
        //return ExecuteQueryForList<SendinfoLast>("SendinfoLast.SelectSendinfoLast", o);
        //}

        public IList<SendinfoLast> GetSendinfoLastPage(object o)
        {
            return ExecuteQueryForList<SendinfoLast>("SendinfoLast.SelectSendinfoLastPage", o);
        }

        public int GetSendinfoLastCount(object o)
        {
            object count = ExecuteQueryForObject("SendinfoLast.SelectSendinfoLastCount", o);
            return (int)count;
        }

        public string UpdateStatus( string id,double sendid, string sendcmd, string status) 
        {
            ISqlMapper NewMap = SqlMapper.Instance();
            NewMap.BeginTransaction();
            try
            {
                //删除跟更改调同一个方法。
                Sendinfo si = new Sendinfo();
                si.SendinfoStatus = Convert.ToDouble(status);
                si.Sendtocmd = sendcmd;
                si.Id =sendid;
                ExecuteUpdateTrans("Sendinfo.UpdateSendinfo", si,NewMap);

                SendinfoLast sil = new SendinfoLast();
                sil.SendinfoStatus = Convert.ToDouble(status);
                sil.Sendtocmd = sendcmd;
                sil.Id =Convert.ToDouble( id);
                ExecuteUpdateTrans("SendinfoLast.UpdateSendinfoLast", sil,NewMap);
                NewMap.CommitTransaction();
                return "true";
            }
            catch (Exception e)
            {
                NewMap.RollBackTransaction();
                return "false";
            }
        }

        public string UpdateStatusNew(string oldid, double sendid, string sendcmd, string status) 
        {
            ISqlMapper NewMap = SqlMapper.Instance();
            NewMap.BeginTransaction();
            try
            {
                //删除跟更改调同一个方法。
                Sendinfo si = new Sendinfo();
                si.SendinfoStatus = Convert.ToDouble(status);
                si.Sendtocmd = sendcmd;
                si.Id =sendid;
                ExecuteUpdateTrans("Sendinfo.UpdateSendinfo", si,NewMap);

                SendinfoLast sil = new SendinfoLast();
                sil.SendinfoStatus = Convert.ToDouble(status);
                sil.Sendtocmd = sendcmd;
                sil.OldId =Convert.ToDouble( oldid);
                ExecuteUpdateTrans("SendinfoLast.UpdateSendinfoLastByOldid", sil,NewMap);
                NewMap.CommitTransaction();
                return "true";
            }
            catch (Exception e)
            {
                NewMap.RollBackTransaction();
                return "false";
            }
        }

        

        public string UpdateSendInfo(string id, string resultStr, string status, double sendId) 
        {
            ISqlMapper NewMap = SqlMapper.Instance();
            NewMap.BeginTransaction();
            try
            { 
                Sendinfo si = new Sendinfo();
                si.SendinfoStatus = Convert.ToDouble(status);
                si.Resultstr=resultStr;
                si.Id=sendId;
                ExecuteUpdateTrans("Sendinfo.UpdateSendinfoStatus", si, NewMap);

                ExecuteUpdateTrans("SendinfoLast.DeleteSendinfoLast",id,NewMap);
                NewMap.CommitTransaction();
                return "true";
            }
            catch (Exception e)
            {
                NewMap.RollBackTransaction();
                return "false";         
            }
        }

        public string UpdateSendInfoByOldid(string oldid, string resultStr, string status, double SendinfoId) 
        {
            ISqlMapper NewMap = SqlMapper.Instance();
            NewMap.BeginTransaction();
            try
            {
                Sendinfo si = new Sendinfo();
                si.SendinfoStatus = Convert.ToDouble(status);
                si.Resultstr = resultStr;
                si.Id = SendinfoId;
                ExecuteUpdateTrans("Sendinfo.UpdateSendinfoStatus", si, NewMap);

                ExecuteUpdateTrans("SendinfoLast.DeleteSendinfoLastByOldId", oldid, NewMap);
                NewMap.CommitTransaction();
                return "true";
            }
            catch (Exception e)
            {
                NewMap.RollBackTransaction();
                return "false";
            }
        }

        public string UpdateSendInfoFail(string id, string status, string resultStr, double sendId) 
        {
            ISqlMapper NewMap = SqlMapper.Instance();
            NewMap.BeginTransaction();
            try
            {
                Sendinfo si = new Sendinfo();
                si.SendinfoStatus = Convert.ToDouble(status);
                si.Resultstr = resultStr;
                si.Id = sendId;
                ExecuteUpdateTrans("Sendinfo.UpdateSendinfoFail", si, NewMap);

                SendinfoLast SFL = new SendinfoLast();
                SFL.Id = Convert.ToDouble(id);
                SFL.SendinfoStatus =Convert.ToDouble( status);
                SFL.Resultstr = resultStr;
                ExecuteUpdateTrans("SendinfoLast.UpdateSendinfoLastFail", si, NewMap);
                NewMap.CommitTransaction();
                return "true";
            }
            catch (Exception e)
            {
                NewMap.RollBackTransaction();
                return "false";
            }
        }

        public string UpdateSendInfoFailByOldId(string oldid, string status, string resultStr, double sendId)
        {
            ISqlMapper NewMap = SqlMapper.Instance();
            NewMap.BeginTransaction();
            try
            {
                Sendinfo si = new Sendinfo();
                si.SendinfoStatus = Convert.ToDouble(status);
                si.Resultstr = resultStr;
                si.Id = sendId;
                ExecuteUpdateTrans("Sendinfo.UpdateSendinfoFail", si, NewMap);

                SendinfoLast SFL = new SendinfoLast();
                SFL.OldId = Convert.ToDouble(oldid);
                SFL.SendinfoStatus = Convert.ToDouble(status);
                SFL.Resultstr = resultStr;
                ExecuteUpdateTrans("SendinfoLast.UpdateSendinfoLastFailByOldId", si, NewMap);
                NewMap.CommitTransaction();
                return "true";
            }
            catch (Exception e)
            {
                NewMap.RollBackTransaction();
                return "false";
            }

        }

        public SendinfoLast GetCmd(string DeviceId) 
        {
            return (SendinfoLast)ExecuteQueryForObject("SendinfoLast.SelectSendinfoLastCmd", DeviceId);
        }

        public IList<SendinfoLast> GetSendinfoLastPageByTerNos(SendinfoLast s) 
        {
            return ExecuteQueryForList<SendinfoLast>("SendinfoLast.SelectSendinfoLastPageByTerNos", s);
            
        }

        public int GetSendinfoLastCountByTerNos(SendinfoLast s) 
        {
            object count = ExecuteQueryForObject("SendinfoLast.SelectSendinfoLastCountByTerNos", s);
            return (int)count;
        }
    }
}
