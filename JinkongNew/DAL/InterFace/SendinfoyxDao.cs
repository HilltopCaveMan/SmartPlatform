// Generated by IBatisNetModel

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;

using IBatisNet.Common.Pagination;
using GInterfaceDAL.InterFace;
using GModel.InterFace;
using IBatisNet.DataMapper;

namespace GDAL.InterFace
{
    public class SendinfoyxDao : BaseSqlMapDao, ISendinfoyxDao
    {
        public string InsertData(Sendinfoyx entity) 
        {
            ISqlMapper NewMap = SqlMapper.Instance();
            try
            {
                NewMap.BeginTransaction();
                int reCount = ExecuteUpdateTrans("Sendinfoyx.UpdateSendInfoyxCommand", entity, NewMap);
                SendinfoyxLast sil = new SendinfoyxLast();
                if (reCount == 0)
                {
                    entity.Id = System.Guid.NewGuid().ToString();
                    ExecuteInsertTrans("Sendinfoyx.InsertSendinfoyx", entity, NewMap);
                   
                    sil.Sendinfoyxid = entity.Id;
                    sil.Id = System.Guid.NewGuid().ToString();
                    sil.CarinfoSim = entity.CarinfoSim;
                    sil.DeviceId = entity.DeviceId;
                    sil.SendinfoCommand = entity.SendinfoCommand;
                    sil.Swiftnumber = entity.Swiftnumber;
                    sil.SendinfoPtime = entity.SendinfoPtime;
                    sil.SendinfoStatus = entity.SendinfoStatus;
                    sil.SendinfoUserid = entity.SendinfoUserid;
                    sil.SendinfoDescription = entity.SendinfoDescription;
                    sil.Sendmethod = entity.Sendmethod;
                    sil.Isonline = entity.Isonline;
                    sil.Sendtotime = entity.Sendtotime;
                    sil.Sendtocmd = entity.Sendtocmd;
                    sil.ReceCmd = entity.ReceCmd;
                    sil.ReceTime = entity.ReceTime;
                    ExecuteInsertTrans("SendinfoyxLast.InsertSendinfoyxLast", sil, NewMap);
                }
                else 
                {
                    sil.Sendinfoyxid = entity.Id;
                    sil.Id = System.Guid.NewGuid().ToString();
                    sil.CarinfoSim = entity.CarinfoSim;
                    sil.DeviceId = entity.DeviceId;
                    sil.SendinfoCommand = entity.SendinfoCommand;
                    sil.Swiftnumber = entity.Swiftnumber;
                    sil.SendinfoPtime = entity.SendinfoPtime;
                    sil.SendinfoStatus = entity.SendinfoStatus;
                    sil.SendinfoUserid = entity.SendinfoUserid;
                    sil.SendinfoDescription = entity.SendinfoDescription;
                    sil.Sendmethod = entity.Sendmethod;
                    sil.Isonline = entity.Isonline;
                    sil.Sendtotime = entity.Sendtotime;
                    sil.Sendtocmd = entity.Sendtocmd;
                    sil.ReceCmd = entity.ReceCmd;
                    sil.ReceTime = entity.ReceTime;
                    ExecuteUpdateTrans("SendinfoyxLast.UpdateSendinfoyxLastCommand", sil, NewMap);
                }
                NewMap.CommitTransaction();
                return "true";
                
            }
            catch (Exception e)
            {
                NewMap.RollBackTransaction();
                return entity.DeviceId;
            }
        }

        public IList<Sendinfoyx> SelectSendinfoListByTerNo(object o)
        {
            return ExecuteQueryForList<Sendinfoyx>("Sendinfoyx.SelectSendinfoyxListByTerNo", o);
        }

        public int GetSendinfoCountByTerNo(object o)
        {
            object count = ExecuteQueryForObject("Sendinfoyx.SelectSendinfoyxCountByTerNo", o);
            return (int)count;
        }

        
    }
}
	