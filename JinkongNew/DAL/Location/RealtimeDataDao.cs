// Generated by IBatisNetModel

using System;

using GInterfaceDAL.Location;
using System.Collections.Generic;
using GModel.Location;
using IBatisNet.DataMapper;
using System.Collections;

namespace GDAL.Location
{
    public class RealtimeDataDao : BaseSqlMapDao, IRealtimeDataDao
    {
        /// <summary>
        /// 同时向实时表和历史表插入数据。
        /// </summary>
        /// <param name="entity"></param>
        /// <returns></returns>
        public string Insert(RealtimeData entity)
        {
            ISqlMapper NewMap = SqlMapper.Instance();
            try
            {
                NewMap.BeginTransaction();
                entity.Id = System.Guid.NewGuid().ToString();
                int count = ExecuteUpdateTrans("RealtimeData.UpdateRealtimeData", entity, NewMap);
                if (count == 0)
                {
                    ExecuteInsertTrans("RealtimeData.InsertRealtimeData", entity, NewMap);
                }
                HistoricalData hid = new HistoricalData();
                hid.Id = System.Guid.NewGuid().ToString();
                hid.Rawdataid = entity.Rawdataid;
                hid.TerNo = entity.TerNo;
                hid.GenerationNum = entity.GenerationNum;
                hid.Factorynum = entity.Factorynum;
                hid.Rtime = entity.Rtime;
                hid.Protocolversion = entity.Protocolversion;
                hid.Programverson = entity.Programverson;
                hid.Gpsverson = entity.Gpsverson;
                hid.Positioningtime = entity.Positioningtime;
                hid.TerStatus = entity.TerStatus;
                hid.TerModel = entity.TerModel;
                hid.Worktime = entity.Worktime;
                hid.Sleeptime = entity.Sleeptime;
                hid.Ntervalltime = entity.Ntervalltime;
                hid.TerVbatt = entity.TerVbatt;
                hid.Totalworktime = entity.Totalworktime;
                hid.Blinddatanum = entity.Blinddatanum;
                hid.TerStatrtimes = entity.TerStatrtimes;
                hid.Ifblinddata = entity.Ifblinddata;
                hid.Ifposition = entity.Ifposition;
                hid.Northorsouth = entity.Northorsouth;
                hid.Eastorwest = entity.Eastorwest;
                hid.Latitude = entity.Latitude;
                hid.Longitude = entity.Longitude;
                hid.BaiduLatitude = entity.BaiduLatitude;
                hid.BaiduLongitude = entity.BaiduLongitude;
                hid.GoogleLatitude = entity.GoogleLatitude;
                hid.GoogleLongitude = entity.GoogleLongitude;
                hid.Position = entity.Position;
                hid.Speed = entity.Speed;
                hid.Direction = entity.Direction;
                hid.Height = entity.Height;
                hid.Gpsant = entity.Gpsant;
                hid.Usesatellite = entity.Usesatellite;
                hid.Visualsatellite = entity.Visualsatellite;
                hid.Gpsrssi = entity.Gpsrssi;
                hid.Gsmrssi = entity.Gsmrssi;
                hid.Lca = entity.Lca;
                hid.Cell = entity.Cell;
                hid.Gsmrssi1 = entity.Gsmrssi1;
                hid.Lca1 = entity.Lca1;
                hid.Cell1 = entity.Cell1;
                hid.Gsmrssi2 = entity.Gsmrssi2;
                hid.Lca2 = entity.Lca2;
                hid.Cell2 = entity.Cell2;
                hid.Gsmrssi3 = entity.Gsmrssi3;
                hid.Lca3 = entity.Lca3;
                hid.Cell3 = entity.Cell3;
                hid.Province = entity.Province;
                hid.City = entity.City;
                hid.County = entity.County;
                hid.Workstate = entity.Workstate;
                hid.Postbacktimes = entity.Postbacktimes;
                hid.Gsmrssi4 = entity.Gsmrssi4;
                hid.Lca4 = entity.Lca4;
                hid.Cell4 = entity.Cell4;
                hid.Gsmrssi5 = entity.Gsmrssi5;
                hid.Lca5 = entity.Lca5;
                hid.Cell5 = entity.Cell5;
                hid.Gsmrssi6 = entity.Gsmrssi6;
                hid.Lca6 = entity.Lca6;
                hid.Cell6 = entity.Cell6;

                hid.Accstate = entity.Accstate;
                hid.Lat = entity.Lat;
                hid.Lng = entity.Lng;
                hid.Carworkvmp = entity.Carworkvmp;
                hid.Carworktemp = entity.Carworktemp;
                hid.RemainlPct = entity.RemainlPct;
                hid.AddupDist = entity.AddupDist;
                hid.ReplydataCode = entity.ReplydataCode;
                hid.ReplydataName = entity.ReplydataName;
                ExecuteInsertTrans("HistoricalData.InsertHistoricalData", hid, NewMap);
                NewMap.CommitTransaction();
                return "true";
            }
            catch (Exception e)
            {
                NewMap.RollBackTransaction();
                return e.Message;
            }
        }

        public IList<TerData> GetTerData(Hashtable ht) 
        {
            return ExecuteQueryForList<TerData>("RealtimeData.GetTerData", ht);
        }

        public int GetTerDataCount(Hashtable ht)
        {
            object count = ExecuteQueryForObject("RealtimeData.GetTerDataCount", ht);
            return (int)count;
        }

        public int Delete(object condition)
        {
            //删除跟插入调同一个方法。
            return ExecuteUpdate("RealtimeData.DeleteRealtimeData", condition);
        }

        public RealtimeData GetRealtimeData(string TerNo)
        {
            return (RealtimeData)ExecuteQueryForObject("RealtimeData.SelectRealtimeData", TerNo);
        }

        public IList<RealtimeData> GetRealtimeDataPage(object o)
        {
            return ExecuteQueryForList<RealtimeData>("RealtimeData.SelectRealtimeDataPage", o);
        }

        public int GetRealtimeDataCount(object o)
        {
            object count = ExecuteQueryForObject("RealtimeData.SelectRealtimeDataCount", o);
            return (int)count;
        }

        public IList<Selectcarmonitor> SelectCarMonitor(Hashtable scm)
        {
            return ExecuteQueryForList<Selectcarmonitor>("RealtimeData.SelectCarMonitor", scm);
        }

        public IList<Selectcarmonitor> SelectTerMonitor(Selectcarmonitor scm)
        {
            return ExecuteQueryForList<Selectcarmonitor>("RealtimeData.SelectTerMonitor", scm);
        }
        public int GetCXWaringCount(Selectcarmonitor sm)
        {
            object count = ExecuteQueryForObject("RealtimeData.SelectCXWarningCount", sm);

            return (int)count;
        }

        public int GetDDWaringCount(Selectcarmonitor sm)
        {
            object count = ExecuteQueryForObject("RealtimeData.SelectDDWarningCount", sm);
            return (int)count;
        }

        public int GetQYWaringCount(Selectcarmonitor sm)
        {
            object count = ExecuteQueryForObject("RealtimeData.SelectQYWarningCount", sm);
            return (int)count;
        }
    }
}
