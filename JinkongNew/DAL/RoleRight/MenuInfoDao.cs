// Generated by IBatisNetModel

using System;

using GInterfaceDAL.RoleRight;
using System.Collections.Generic;
using GModel.RoleRight;
using GModel;
using IBatisNet.DataMapper;
using System.Collections;

namespace GDAL.RoleRight
{
    public class MenuInfoDao : BaseSqlMapDao, IMenuInfoDao
    {
		public object Insert(MenuInfo entity)
        {
            return ExecuteInsert("MenuInfo.InsertMenuInfo", entity);
        }

        public int Update(MenuInfo entity)
        {
            return ExecuteUpdate("MenuInfo.UpdateMenuInfo", entity);
        }

		public int Delete(object condition)
        {
            //删除跟插入调同一个方法。
            return ExecuteUpdate("MenuInfo.DeleteMenuInfo", condition);
        }

        MenuInfo IMenuInfoDao.GetMenuInfo(object userinfoId)
        {
            return (MenuInfo)ExecuteQueryForObject("MenuInfo.SelectMenuInfo", userinfoId);
        }

		//public IList<MenuInfo> GetMenuInfoList(object o)
        //{
            //return ExecuteQueryForList<MenuInfo>("MenuInfo.SelectMenuInfo", o);  
        //}

        public IList<MenuInfo> GetMenuInfoPage(object o) 
        {
            return ExecuteQueryForList<MenuInfo>("MenuInfo.SelectMenuInfoPage", o);
        }

		public int GetMenuInfoCount(object o) 
        {
            object count = ExecuteQueryForObject("MenuInfo.SelectMenuInfoCount", o);
            return (int)count;
        }

        //public IList<MenuInfo> GetMenuTreeAll() 
        //{
        //    return ExecuteQueryForList<MenuInfo>("MenuInfo.SelectMenuInfoPage", o);
        //    return null;
        //}

        public IList<MenuInfo> GetMenuByParentOrMenuName(object o)  
        {
            return ExecuteQueryForList<MenuInfo>("MenuInfo.GetMenuByRoleId", o);           
        }

        public List<TreeMode> GetMenuTreeByRoleId(string RoleId) 
        {
            ISqlMapper NewMap = SqlMapper.Instance();
            NewMap.BeginTransaction();
            List<TreeMode> mTreeNode = new List<TreeMode>();
            try
            {
                Hashtable ht = new Hashtable();
                ht.Add("MenuType", "0");
                ht.Add("RoleId", RoleId);
                ht.Add("MenuParent", "");
                
                IList<MenuInfo> lmi = ExecuteQueryForListTrans<MenuInfo>("MenuInfo.SelectMenuInfoByRoleId", ht,NewMap);
                if (lmi != null && lmi.Count > 0)
                {
                    for (int i = 0; i < lmi.Count; i++)
                    {
                        TreeMode treeNode = new TreeMode("");
                        treeNode.id = lmi[i].MenuId;
                        treeNode.text = lmi[i].MenuName;
                        treeNode.icon = lmi[i].MenuIcon;
                        treeNode.url = lmi[i].MenuUrl;
                        treeNode.children = new List<TreeMode>();
                        mTreeNode.Add(treeNode);
                    }
                    for (int n = 0; n < mTreeNode.Count; n++)
                    {
                        ht["MenuType"] = "1";
                        ht["MenuParent"]= mTreeNode[n].id;
                        IList<MenuInfo> lmic = ExecuteQueryForListTrans<MenuInfo>("MenuInfo.SelectMenuChildByRoleId", ht, NewMap);
                        if (lmic != null && lmic.Count > 0)
                        {
                            for (int m = 0; m < lmic.Count; m++)
                            {
                                TreeMode treeNode = new TreeMode("");
                                treeNode.id = lmic[m].MenuId;
                                treeNode.text = lmic[m].MenuName;
                                treeNode.icon = lmic[m].MenuIcon;
                                treeNode.url = lmic[m].MenuUrl;
                                mTreeNode[n].children.Add(treeNode);
                            }
                        }
                    }
                    NewMap.CommitTransaction();
                    return mTreeNode;
                }
                else 
                {
                    NewMap.RollBackTransaction();
                    return mTreeNode;
                }
            }
            catch (Exception e)
            {
                NewMap.RollBackTransaction();
                return mTreeNode;
            }
        }
    }
}
	