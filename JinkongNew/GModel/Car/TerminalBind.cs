// Generated by IBatisNetModel
using System;

namespace GModel.Car
{
    [Serializable]
    public sealed class TerminalBind
    {
        #region Private Members
        private bool _isChanged;
        private bool _isDeleted;
        private int _startdata = 0;
        private int _enddata = 0;
        private int _newRow = 0;

        private string _ter_guid;
        private string _ter_no;
        private string _dept_id;
        private string _ter_simcard;
        private string _businessdivisionname;
        private string _businessdivisioncode;
        private string _ter_typeid;
        private string _pro_model;
        private string _pro_name;
        private string _car_no;
        private string _car_id;
        private string _type_id;
        private string _type_name;
        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public TerminalBind()
        {
            _ter_guid = "";
            _ter_no = "";
            _dept_id = "";
            _ter_simcard = "";
            _businessdivisionname = "";
            _businessdivisioncode = "";
            _ter_typeid = "";
            _pro_model = "";
            _pro_name = "";
            _car_no = "";
            _car_id = "";
            _type_id = "";
            _type_name = "";
        }
        #endregion // End of Default ( Empty ) Class Constuctor

        #region Public Properties

        /// <summary>
        /// 
        /// </summary>		
        public string TerGuid
        {
            get { return _ter_guid; }
            set
            {
                if (value != null && value.Length > 40)
                    throw new ArgumentOutOfRangeException("Invalid value for TerGuid", value, value.ToString());

                _isChanged |= (_ter_guid != value); _ter_guid = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string TerNo
        {
            get { return _ter_no; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for TerNo", value, value.ToString());

                _isChanged |= (_ter_no != value); _ter_no = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string DeptId
        {
            get { return _dept_id; }
            set
            {
                if (value != null && value.Length > 40)
                    throw new ArgumentOutOfRangeException("Invalid value for DeptId", value, value.ToString());

                _isChanged |= (_dept_id != value); _dept_id = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string TerSimcard
        {
            get { return _ter_simcard; }
            set
            {
                if (value != null && value.Length > 13)
                    throw new ArgumentOutOfRangeException("Invalid value for TerSimcard", value, value.ToString());

                _isChanged |= (_ter_simcard != value); _ter_simcard = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string Businessdivisionname
        {
            get { return _businessdivisionname; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for Businessdivisionname", value, value.ToString());

                _isChanged |= (_businessdivisionname != value); _businessdivisionname = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string Businessdivisioncode
        {
            get { return _businessdivisioncode; }
            set
            {
                if (value != null && value.Length > 80)
                    throw new ArgumentOutOfRangeException("Invalid value for Businessdivisioncode", value, value.ToString());

                _isChanged |= (_businessdivisioncode != value); _businessdivisioncode = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string TerTypeid
        {
            get { return _ter_typeid; }
            set
            {
                if (value != null && value.Length > 40)
                    throw new ArgumentOutOfRangeException("Invalid value for TerTypeid", value, value.ToString());

                _isChanged |= (_ter_typeid != value); _ter_typeid = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string ProModel
        {
            get { return _pro_model; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for ProModel", value, value.ToString());

                _isChanged |= (_pro_model != value); _pro_model = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string ProName
        {
            get { return _pro_name; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for ProName", value, value.ToString());

                _isChanged |= (_pro_name != value); _pro_name = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string CarNo
        {
            get { return _car_no; }
            set
            {
                if (value != null && value.Length > 40)
                    throw new ArgumentOutOfRangeException("Invalid value for CarNo", value, value.ToString());

                _isChanged |= (_car_no != value); _car_no = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string CarId
        {
            get { return _car_id; }
            set
            {
                if (value != null && value.Length > 40)
                    throw new ArgumentOutOfRangeException("Invalid value for CarId", value, value.ToString());

                _isChanged |= (_car_id != value); _car_id = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string TypeId
        {
            get { return _type_id; }
            set
            {
                if (value != null && value.Length > 40)
                    throw new ArgumentOutOfRangeException("Invalid value for TypeId", value, value.ToString());

                _isChanged |= (_type_id != value); _type_id = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string TypeName
        {
            get { return _type_name; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for TypeName", value, value.ToString());

                _isChanged |= (_type_name != value); _type_name = value;
            }
        }


        public int StartData
        {
            get { return _startdata; }
            set
            {
                _startdata = value;
            }
        }

        public int EndData
        {
            get { return _enddata; }
            set
            {
                _enddata = value;
            }
        }
        public int NewRow
        {
            get { return _newRow; }
            set { _newRow = value; }
        }
        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsChanged
        {
            get { return _isChanged; }
        }

        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsDeleted
        {
            get { return _isDeleted; }
        }

        #endregion


        #region Public Functions

        /// <summary>
        /// mark the item as deleted
        /// </summary>
        public void MarkAsDeleted()
        {
            _isDeleted = true;
            _isChanged = true;
        }

        #endregion


    }
}
