
<div id="SearchTerBar" style=" position:fixed; width:100%; background: #fafafa; padding: 10px; margin: 2px 10px; border-color: #F9F9F9; border-style: solid; border-width: 1px; ">
    <table>
        <tr>
            <td>
            关键字：<input id="CarOrgName" />
            @if (ViewBag.AddDept == "true")
            {
                <a class="easyui-linkbutton" icon="icon-add" id="btn_add" onclick="btn_add_click()">添加</a>
            }
            @if (ViewBag.EditDept == "true")
            {
                <a class="easyui-linkbutton" icon="icon-edit" id="btn_mod" onclick="btn_mod_click()">修改</a>
            }
            @if (ViewBag.DelDept == "true")
            {
                <a class="easyui-linkbutton" icon="icon-remove" id="btn_del" onclick="btn_del_click()">删除</a>
            }
            </td>
        </tr>
    </table>
</div>
<div class="tabcontant" style=" padding: 10px; padding-top:54px; margin: 2px 10px; border-color: #F9F9F9; border-style: solid; border-width: 1px; ">
    <table>
        <tr>
            <td>
                <div id="CarOrgBar" style="padding:10px;">
                    <ul id="CarInfoEnterTree" style="margin-top:10px"></ul>
                    <div id="CarOrgRightMenu" class="easyui-menu" style="width:120px;">
                        @if (ViewBag.AddDept == "true")
                        {
                            <div onclick="append()" data-options="iconCls:'icon-add'">添加</div>
                        }
                        @if (ViewBag.DelDept == "true")
                        {
                            <div onclick="removeit()" data-options="iconCls:'icon-remove'">删除</div>
                        }
                        @if (ViewBag.EditDept == "true")
                        {
                            <div onclick="expand()" data-options="iconCls:'icon-edit'">重命名</div>
                        }
                    </div>
                </div>
            </td>
        </tr>
    </table>
</div>
<style>
   
</style>
<script src="~/assets/javascripts/jquery.easyuitree.js"></script>
<script type="text/javascript">
    /*
    * 1）扩展jquery easyui tree的节点检索方法。使用方法如下：
    * $("#treeId").tree("search", searchText);
    * 其中，treeId为easyui tree的根UL元素的ID，searchText为检索的文本。
    * 如果searchText为空或""，将恢复展示所有节点为正常状态
    */
    (function ($) {
        $.extend($.fn.tree.methods, {
            /**
             * 扩展easyui tree的搜索方法
             * tree easyui tree的根DOM节点(UL节点)的jQuery对象
             * searchText 检索的文本
             * this-context easyui tree的tree对象
             */
            search: function (jqTree, searchText) {
                //easyui tree的tree对象。可以通过tree.methodName(jqTree)方式调用easyui tree的方法
                var tree = this;

                //获取所有的树节点
                var nodeList = getAllNodes(jqTree, tree);

                //如果没有搜索条件，则展示所有树节点
                searchText = $.trim(searchText);
                if (searchText == "") {
                    for (var i = 0; i < nodeList.length; i++) {
                        $(".tree-node-targeted", nodeList[i].target).removeClass("tree-node-targeted");
                        $(nodeList[i].target).show();
                    }
                    //展开已选择的节点（如果之前选择了）
                    var selectedNode = tree.getSelected(jqTree);
                    if (selectedNode) {
                        tree.expandTo(jqTree, selectedNode.target);
                    }
                    return;
                }

                //搜索匹配的节点并高亮显示
                var matchedNodeList = [];
                if (nodeList && nodeList.length > 0) {
                    var node = null;
                    for (var i = 0; i < nodeList.length; i++) {
                        node = nodeList[i];
                        if (isMatch(searchText, node.text)) {
                            matchedNodeList.push(node);
                        }
                    }

                    //隐藏所有节点
                    for (var i = 0; i < nodeList.length; i++) {
                        $(".tree-node-targeted", nodeList[i].target).removeClass("tree-node-targeted");
                        $(nodeList[i].target).hide();
                    }

                    //折叠所有节点
                    tree.collapseAll(jqTree);

                    //展示所有匹配的节点以及父节点
                    for (var i = 0; i < matchedNodeList.length; i++) {
                        showMatchedNode(jqTree, tree, matchedNodeList[i]);
                    }
                }
            },

            /**
             * 展示节点的子节点（子节点有可能在搜索的过程中被隐藏了）
             *  node easyui tree节点
             */
            showChildren: function (jqTree, node) {
                //easyui tree的tree对象。可以通过tree.methodName(jqTree)方式调用easyui tree的方法
                var tree = this;

                //展示子节点
                if (!tree.isLeaf(jqTree, node.target)) {
                    var children = tree.getChildren(jqTree, node.target);
                    if (children && children.length > 0) {
                        for (var i = 0; i < children.length; i++) {
                            if ($(children[i].target).is(":hidden")) {
                                $(children[i].target).show();
                            }
                        }
                    }
                }
            },

            /**
             * 将滚动条滚动到指定的节点位置，使该节点可见（如果有滚动条才滚动，没有滚动条就不滚动）
             *  param {
             *    treeContainer: easyui tree的容器（即存在滚动条的树容器）。如果为null，则取easyui tree的根UL节点的父节点。
             *    targetNode:  将要滚动到的easyui tree节点。如果targetNode为空，则默认滚动到当前已选中的节点，如果没有选中的节点，则不滚动
             * }
             */
            scrollTo: function (jqTree, param) {
                //easyui tree的tree对象。可以通过tree.methodName(jqTree)方式调用easyui tree的方法
                var tree = this;

                //如果node为空，则获取当前选中的node
                var targetNode = param && param.targetNode ? param.targetNode : tree.getSelected(jqTree);

                if (targetNode != null) {
                    //判断节点是否在可视区域
                    var root = tree.getRoot(jqTree);
                    var $targetNode = $(targetNode.target);
                    var container = param && param.treeContainer ? param.treeContainer : jqTree.parent();
                    var containerH = container.height();
                    var nodeOffsetHeight = $targetNode.offset().top - container.offset().top;
                    if (nodeOffsetHeight > (containerH - 30)) {
                        var scrollHeight = container.scrollTop() + nodeOffsetHeight - containerH + 30;
                        container.scrollTop(scrollHeight);
                    }
                }
            }
        });

        /**
         * 展示搜索匹配的节点
         */
        function showMatchedNode(jqTree, tree, node) {
            //展示所有父节点
            $(node.target).show();
            $(".tree-title", node.target).addClass("tree-node-targeted");
            var pNode = node;
            while ((pNode = tree.getParent(jqTree, pNode.target))) {
                $(pNode.target).show();
            }
            //展开到该节点
            tree.expandTo(jqTree, node.target);
            //如果是非叶子节点，需折叠该节点的所有子节点
            if (!tree.isLeaf(jqTree, node.target)) {
                tree.collapse(jqTree, node.target);
            }
        }

        /**
         * 判断searchText是否与targetText匹配
         *  searchText 检索的文本
         *  targetText 目标文本
         * 检索的文本与目标文本匹配；否则为false.
         */
        function isMatch(searchText, targetText) {
            return $.trim(targetText) != "" && targetText.indexOf(searchText) != -1;
        }

        /**
         * 获取easyui tree的所有node节点
         */
        function getAllNodes(jqTree, tree) {
            var allNodeList = jqTree.data("allNodeList");
            if (!allNodeList) {
                var roots = tree.getRoots(jqTree);
                allNodeList = getChildNodeList(jqTree, tree, roots);
                jqTree.data("allNodeList", allNodeList);
            }
            return allNodeList;
        }

        /**
         * 定义获取easyui tree的子节点的递归算法
         */
        function getChildNodeList(jqTree, tree, nodes) {
            var childNodeList = [];
            if (nodes && nodes.length > 0) {
                var node = null;
                for (var i = 0; i < nodes.length; i++) {
                    node = nodes[i];
                    childNodeList.push(node);
                    if (!tree.isLeaf(jqTree, node.target)) {
                        var children = tree.getChildren(jqTree, node.target);
                        childNodeList = childNodeList.concat(getChildNodeList(jqTree, tree, children));
                    }
                }
            }
            return childNodeList;
        }
    })(jQuery);

    var AddDeptVal = '@ViewBag.AddDept';
    var DelDeptVal = '@ViewBag.DelDept';
    var EditDeptVal = '@ViewBag.EditDept';

    var DeptManager = [];

    function btn_add_click()
    {
        var node = $('#CarInfoEnterTree').tree('getSelected');
        if (node.id == "" && node.id == null) {
            window.parent.$.DialogOpen('/Dept/ANode', { title: "添加企业", width: 450, height: 250 });
        } else {
            window.parent.$.DialogOpen('/Dept/ANode?FatherNodeId=' + node.id, { title: "添加企业", width: 450, height: 250 });
        }
    }
    function btn_mod_click()
    {
        var id = $("#CarInfoEnterTree").tree('getSelected').id;
        var text = $("#CarInfoEnterTree").tree('getSelected').text;
        if (id == "" || id == null) {
            window.parent.$.messager.alert('警告', '您没有选择需要修改的', 'error');
        } else {
            window.parent.$.DialogOpen('/Dept/ENode?DeptId=' + id, { title: "修改企业", width: 450, height: 250 });
        }
    }
    function btn_del_click()
    {
        if ($("#CarInfoEnterTree").tree('getSelected') != null) {
            var id = $("#CarInfoEnterTree").tree('getSelected').id;
            $.post("/Dept/GetDeptByFatherId", { DeptId: id }, function (e) {
                if (e > 0) {
                    window.parent.$.messager.confirm('确定', '该企业下面有子企业，确定要删除吗', function (t) {
                        if (t) {
                            DelDeptFun(id, "true");
                        }
                    });
                } else {
                    window.parent.$.messager.confirm('确定', '您确定要删除该企业吗', function (t) {
                        if (t) {
                            DelDeptFun(id, "false");
                        }
                    });
                }
            });
        } else {
            window.parent.$.messager.alert('警告', '您没有选择需要删除的企业！', 'error');
        }
    }

    if (AddDeptVal == "true") {
        var AddDept = {
            text: '添加',
            iconCls: 'icon-add easyui-linkbutton',
            handler: function () {
                var node = $('#CarInfoEnterTree').tree('getSelected');
                if (node.id == "" && node.id == null) {
                    window.parent.$.DialogOpen('/Dept/ANode', { title: "添加企业", width: 450, height: 250 });
                } else {
                    window.parent.$.DialogOpen('/Dept/ANode?FatherNodeId=' + node.id, { title: "添加企业", width: 450, height: 250 });
                }
            }
        };
        DeptManager.push(AddDept);
    }

    if (EditDeptVal == "true") {
        var EditDept = {
            iconCls: 'icon-edit',
            text: '修改',
            handler: function () {
                var id = $("#CarInfoEnterTree").tree('getSelected').id;
                var text = $("#CarInfoEnterTree").tree('getSelected').text;
                if (id == "" && id == null) {
                    window.parent.$.messager.alert('警告', '您没有选择需要修改的', 'error');
                } else {
                    window.parent.$.DialogOpen('/Dept/ENode?DeptId=' + id, { title: "修改企业", width: 450, height: 250 });
                }
            }
        };
        DeptManager.push(EditDept);
    }

    if (DelDeptVal == "true") {
        var DelDept = {
            iconCls: 'icon-remove',
            text: '删除',
            handler: function () {
                if ($("#CarInfoEnterTree").tree('getSelected') != null) {
                    var id = $("#CarInfoEnterTree").tree('getSelected').id;
                    $.post("/Dept/GetDeptByFatherId", { DeptId: id }, function (e) {
                        if (e > 0) {
                            window.parent.$.messager.confirm('确定', '该企业下面有子企业，确定要删除吗',
                                function (t) {
                                    if (t) {
                                        DelDeptFun(id, "true");
                                    }
                                }
                            );
                        }
                        else {
                            window.parent.$.messager.confirm('确定', '您确定要删除该企业吗',
                                function (t) {
                                    if (t) {
                                        DelDeptFun(id, "false");
                                    }
                                }
                            );
                        }
                    });
                }
                else {
                    window.parent.$.messager.alert('警告', '您没有选择需要删除的企业！', 'error');
                }
            }
        };
        DeptManager.push(DelDept);
    }

    $(function () {
        $("input, textarea, select").uniform();
        ////////组织机构的操作///////
        //$('#CarOrgBar').panel({
        //    title: "组织机构",
        //    width: $(document.body).width()-20,
        //    height: $(document.body).height() - 20,
        //    tools: DeptManager
        //});

        LoadDepartmentTree();

        //*******************************
        //模糊查询企业列表
        //*******************************
        $('#CarOrgName').searchbox({
            width: 220,
            searcher: function (value, name) {
                
                $("#CarInfoEnterTree").tree("search", value);
            },
            prompt: '请输入......'
        });
    });

    function DelDeptFun(id, DelType) {
        $.ajax({
            url: '/Dept/DelEnter?Businessdivisionid=' + id + '&ExistChildren=' + DelType,
            type: "post",
            success: function (r) {
                if (r > 0) {
                    window.parent.$.messager.show({
                        title: '提示',
                        msg: "删除成功！",
                        timeout: 3000
                    });
                    LoadDepartmentTree();
                } else if (r == 0) {
                    window.parent.$.messager.show({
                        title: '提示',
                        msg: "此企业不存在！",
                        timeout: 3000
                    });
                    LoadDepartmentTree();
                } else if (r == -1) {
                    window.parent.$.messager.show({
                        title: '提示',
                        msg: "此企业下存在车和终端，请转移后再删除！",
                        timeout: 3000
                    });
                } else if (r == -2) {
                    window.parent.$.messager.show({
                        title: '提示',
                        msg: "此企业下存在车，请转移后再删除！",
                        timeout: 3000
                    });
                } else if (r == -3) {
                    window.parent.$.messager.show({
                        title: '提示',
                        msg: "此企业下存在终端，请转移后再删除！",
                        timeout: 3000
                    });
                }
            }
        });
    }

    //////////加载部门树//////////
    function LoadDepartmentTree() {
        $('#CarInfoEnterTree').tree({
            url: "/Dept/GetOrgNode",
            animate: true,
            lines: true,
            onContextMenu: function (e, node) {
                e.preventDefault();
                // 选中节点
                $('#CarInfoEnterTree').tree('select', node.target);
                // 实例右键菜单
                $('#CarOrgRightMenu').menu('show', {
                    left: e.pageX,
                    top: e.pageY
                });
            },
            onLoadSuccess: function (node, data) {
                $("#CarInfoEnterTree li:eq(0)")
                    .find("div:eq(0)")
                    .addClass("tree-node-selected");   //设置第一个节点高亮
                var n = $("#CarInfoEnterTree").tree("getSelected");
            }
        });
    };

    ///Tree方法
    //////部门树添加///////
    function append() {
        var node = $('#CarInfoEnterTree').tree('getSelected');
        window.parent.$.DialogOpen('/Dept/ANode?FatherNodeId=' + node.id, { title: "添加组织机构", width: 450, height: 340 });
    };
    /////部门树修改//////
    function expand() {
        var node = $('#CarInfoEnterTree').tree('getSelected');
        window.parent.$.DialogOpen('/Dept/ENode?DeptId=' + node.id, { title: "修改组织机构", width: 450, height: 240 });
    };
    //////部门树删除/////
    function removeit() {
        if ($("#CarInfoEnterTree").tree('getSelected') != null) {
            var id = $("#CarInfoEnterTree").tree('getSelected').id;
            $.post("/Dept/GetDeptByFatherId", { DeptId: id }, function (e) {
                if (e > 0) {
                    window.parent.$.messager.confirm('确定', '该企业下面有子企业，确定要删除吗', function (t) {
                        if (t) {
                            DelDeptFun(id, "true");
                        }
                    });
                } else {
                    window.parent.$.messager.confirm('确定', '您确定要删除该企业吗', function (t) {
                        if (t) {
                            DelDeptFun(id, "false");
                        }
                    });
                }
            });
        } else {
            window.parent.$.messager.alert('警告', '您没有选择需要删除的企业！', 'error');
        }
    };
</script>
